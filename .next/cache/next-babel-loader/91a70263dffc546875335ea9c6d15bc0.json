{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\components\\\\Layout.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { setCurrentUser, setPendingNotifications } from '../redux/reducers/currentUser';\nimport { setToken } from '../redux/reducers/token';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport NavBar from './navBar/NavBar';\nimport { FIND_USER, PENDING_NOTIFS, LIST_OF_NOTIFICATIONS } from '../src/schemas/queries';\nimport { bindActionCreators } from 'redux';\n\nconst Layout = props => {\n  if (true) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 47\n    }\n  }, \"Rendering\");else {\n    const {\n      0: query,\n      1: setQuery\n    } = useState('');\n\n    const onQueryChange = event => {\n      setQuery(event.target.value);\n    };\n\n    if (localStorage.getItem('token') && props.token === null) {\n      props.setToken(localStorage.getItem('token'));\n    }\n\n    const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake';\n    const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\n      variables: {\n        userId: currentUserId\n      }\n    });\n    const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake';\n    const userQuery = useQuery(FIND_USER, {\n      variables: {\n        username: currentUserUN\n      }\n    });\n    const notifsQuery = useQuery(LIST_OF_NOTIFICATIONS, {\n      // variables: {notifications: props.currentUser.notifications.map(n => n._id)}\n      variables: {\n        notifications: [\"5ea3a4ea138c01000450206d\", \"5ea4692a80819a0004a37f1a\"]\n      }\n    });\n    console.log(notifsQuery);\n\n    const notifsQueryConditions = () => {\n      if (!notifsQuery.data) return null;\n      if (props.currentUser[0].userFrom.username) return null;\n      return;\n    };\n\n    const pendingNotifsConditions = () => {\n      if (!pendingNotifsQuery.data) return null;\n      if (props.currentUser && props.currentUser.pendingNotifications) return null;\n      return pendingNotifsQuery.data.searchAwaitingNotifs;\n    };\n\n    const userConditions = (query, reducer) => {\n      if (!query.data) return null;\n      if (!query.data.findUser) return null;\n      if (reducer) return null;\n      return query.data.findUser;\n    };\n\n    const pendingNotifs = pendingNotifsConditions();\n    const user = userConditions(userQuery, props.currentUser);\n    useEffect(() => {\n      if (user) {\n        props.setCurrentUser(user);\n      }\n\n      if (pendingNotifs) {\n        props.setPendingNotifications(pendingNotifs);\n      }\n    }, [user, props.currentUser, props, pendingNotifs, props.setPendingNotifications]);\n    return __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, __jsx(NavBar, {\n      query: query,\n      onQueryChange: onQueryChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }), props.children);\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUser: bindActionCreators(setCurrentUser, dispatch),\n    setPendingNotifications: bindActionCreators(setPendingNotifications, dispatch)\n  };\n};\n\nsetCurrentUser;\nsetPendingNotifications;\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/components/Layout.js"],"names":["React","useState","useEffect","setCurrentUser","setPendingNotifications","setToken","connect","BrowserRouter","Router","Route","useQuery","NavBar","FIND_USER","PENDING_NOTIFS","LIST_OF_NOTIFICATIONS","bindActionCreators","Layout","props","query","setQuery","onQueryChange","event","target","value","localStorage","getItem","token","currentUserId","currentUser","_id","pendingNotifsQuery","variables","userId","currentUserUN","userQuery","username","notifsQuery","notifications","console","log","notifsQueryConditions","data","userFrom","pendingNotifsConditions","pendingNotifications","searchAwaitingNotifs","userConditions","reducer","findUser","pendingNotifs","user","children","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { setCurrentUser, setPendingNotifications } from '../redux/reducers/currentUser'\r\nimport { setToken } from '../redux/reducers/token'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport NavBar from './navBar/NavBar'\r\nimport { FIND_USER, PENDING_NOTIFS, LIST_OF_NOTIFICATIONS } from '../src/schemas/queries'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nconst Layout = (props) => {\r\n    if (typeof window === 'undefined') return <h1>Rendering</h1>\r\n    else {\r\n        const [query, setQuery] = useState('')\r\n\r\n        const onQueryChange = (event) => {\r\n        setQuery(event.target.value)\r\n        }\r\n        if (localStorage.getItem('token') && props.token === null) {\r\n        props.setToken(localStorage.getItem('token'))\r\n        }\r\n        const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake'\r\n        const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\r\n            variables:  {userId: currentUserId}\r\n        })\r\n        const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake'\r\n        const userQuery = useQuery(FIND_USER, {\r\n            variables: {username: currentUserUN}\r\n        })\r\n        const notifsQuery = useQuery(LIST_OF_NOTIFICATIONS, {\r\n            // variables: {notifications: props.currentUser.notifications.map(n => n._id)}\r\n            variables: {notifications: [ \"5ea3a4ea138c01000450206d\", \"5ea4692a80819a0004a37f1a\" ]}\r\n        })\r\n        console.log(notifsQuery)\r\n        const notifsQueryConditions = () => {\r\n            if (!notifsQuery.data) return null\r\n            if (props.currentUser[0].userFrom.username) return null\r\n            return \r\n\r\n        }\r\n        const pendingNotifsConditions = () => {\r\n            if (!pendingNotifsQuery.data) return null\r\n            if (props.currentUser && props.currentUser.pendingNotifications) return null\r\n            return pendingNotifsQuery.data.searchAwaitingNotifs\r\n        }\r\n        const userConditions = (query, reducer) => {\r\n            if (!query.data) return null\r\n            if (!query.data.findUser) return null\r\n            if (reducer) return null\r\n            return query.data.findUser\r\n        }\r\n        const pendingNotifs = pendingNotifsConditions()\r\n        const user = userConditions(userQuery, props.currentUser)\r\n        useEffect(() => {\r\n        if (user) {\r\n            props.setCurrentUser(user)\r\n        }\r\n        if (pendingNotifs) {\r\n            props.setPendingNotifications(pendingNotifs)\r\n        }\r\n        }, [user, props.currentUser, props, pendingNotifs, props.setPendingNotifications])\r\n    \r\n        return (\r\n            <div className=\"wrapper\">\r\n                <NavBar query={query} onQueryChange={onQueryChange} />\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        token: state.token,\r\n        currentUser: state.currentUser\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setToken: bindActionCreators(setToken, dispatch),\r\n        setCurrentUser: bindActionCreators(setCurrentUser, dispatch),\r\n        setPendingNotifications: bindActionCreators(setPendingNotifications, dispatch),\r\n    }\r\n}\r\nsetCurrentUser\r\nsetPendingNotifications\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Layout)"]},"metadata":{},"sourceType":"module"}