{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\postformpage.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_POST } from '../../schemas/mutations';\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../../functions/functions';\nimport '../../static/css/pages/postForm.css';\nimport { withRouter } from 'react-router-dom';\nimport InputHeader from '../text-field/InputHeader';\nimport { setAlert, resetAlert } from '../../reducers/alertNotif';\nimport SkillSugg from '../text-field/SkillSugg';\n\nlet PostFormPage = props => {\n  // const title = useField('text')\n  // const description = useField('text')\n  // const [color, setColor] = useState(null)\n  // const groupContactLink = useField('url')\n  // const [skillName, setSkillName] = useState('')\n  // const [skillNameList, setSkillNameList] = useState([])\n  // const [skillCapacity, setSkillCapacity] = useState('')\n  // const [skillCapList, setSkillCapList] = useState([])\n  // const [imageLink, setImageLink] = useState('')\n  // const [imageLinkList, setImageLinkList] = useState([])\n  // const [referenceLink, setReferenceLink] = useState('')\n  // const [referenceLinkList, setReferenceLinkList] = useState([])\n  // const [skillProposition, setSkillProposition] = useState(null)\n  // const [skillSelected, setSkillSelected] = useState(null)\n  // const handleError = (e) => {\n  //     const message = e.message\n  //     if (message.includes('Response not successful')) {\n  //        triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //        return null \n  //     }\n  //     if (message.includes('Path `title` (')) {\n  //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('dup key: { title')) {\n  //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate description')) {\n  //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('minimum allowed length')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('Path `description` (')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate contactLink')) {\n  //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  // }\n  // const [createPost] = useMutation( CREATE_POST, {\n  //     onError: handleError\n  // })\n  // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault()\n  //     if (!props.token) {\n  //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\n  //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     let cleanedTitle = []\n  //     for (const word of title.fields.value.split(' ')) {\n  //         if (word.length) cleanedTitle.push(word)\n  //     }\n  //     const postCreated = await createPost({\n  //         variables: {\n  //             title: cleanedTitle.join(' '),\n  //             user: props.currentUser._id,\n  //             skillNames: skillNameList,\n  //             skillCapacities: skillCapList,\n  //             skillFills: skillProposition,\n  //             description: description.fields.value,\n  //             contactLink: groupContactLink.fields.value,\n  //             color: color,\n  //             imageLinks: imageLinkList,\n  //             referenceLinks: referenceLinkList\n  //         }\n  //     })\n  //     if (postCreated) {\n  //         title.reset()\n  //         description.reset()\n  //         groupContactLink.reset()\n  //         setSkillName('')\n  //         setSkillNameList([])\n  //         setSkillCapacity('')\n  //         setSkillCapList([])\n  //         setImageLink('')\n  //         setImageLinkList([])\n  //         setReferenceLink('')\n  //         setReferenceLinkList([])\n  //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\n  //     }\n  // }\n  // const colors = [\n  //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\n  //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \n  //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \n  //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\n  // ]\n  // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className=\"color-ins\" style={{backgroundColor: c}} key={`PFC${c}`} />)\n  // const addSkills = () => {\n  //     let cleanedSkill = []\n  //     for (const word of skillName.split(' ')) {\n  //         if (word.length) cleanedSkill.push(word)\n  //     }\n  //     setSkillName(cleanedSkill.join(' '))\n  //     if (Number(skillCapacity)){\n  //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\n  //         setSkillName('')\n  //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\n  //         setSkillCapacity('')\n  //         setSkillProposition(null)\n  //         setSkillSelected(null)\n  //     }\n  // }\n  // const removeSkill = (ind) => {\n  //     const newSkillNameList = []\n  //     for (const i in skillNameList) {\n  //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\n  //     }\n  //     setSkillNameList(newSkillNameList)\n  //     const newSkillCapList = []\n  //     for (const i in skillCapList) {\n  //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\n  //     }\n  //     setSkillCapList(newSkillCapList)\n  //     const newSkillProposition = []\n  //     for (const i in props.skillProposition) {\n  //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\n  //     }\n  // }\n  // const removeImage = (ind) => {\n  //     const newImageLinkList = []\n  //     for (const i in imageLinkList) {\n  //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\n  //     }\n  //     setImageLinkList(newImageLinkList)\n  // }\n  // const addImage = () => {\n  //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\n  //         setImageLinkList(imageLinkList.concat(imageLink))\n  //         setImageLink('')\n  //     }\n  // }\n  // const removeRL = (ind) => {\n  //     const newReferenceLinkList = []\n  //     for (const i in referenceLinkList) {\n  //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\n  //     }\n  //     setReferenceLinkList(newReferenceLinkList)\n  // }\n  // const addRL = () => {\n  //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n  //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\n  //         setReferenceLink('')\n  //     }\n  // }\n  // const skillsHTML = () => {\n  //     let skillsHTML = []\n  //     for (const ind in skillNameList) {\n  //         skillsHTML.push(\n  //             <div className=\"PF-skill-wrapper\" key={`PFS${skillNameList[ind]}`}>\n  //                 <div className=\"PF-skill-container\">\n  //                     <div className=\"PF-skill-name\">{skillNameList[ind]}</div>\n  //                     <div className=\"PF-skill-cap\">{skillCapList[ind]}</div>\n  //                 </div>\n  //                 <div className=\"PF-skill-remove\" onClick={() => removeSkill(ind)}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return skillsHTML\n  // }\n  // const skillContribution = () => {\n  //     if (!skillNameList.length) {\n  //         return <h4 className=\"PF-input-title\" style={{opacity: 0.7}}>must add skill first</h4>\n  //     }\n  //     const handleSkillSelect = (i) => {\n  //         const skillArray = Array(skillNameList.length).fill(0)\n  //         skillArray[i] = 1\n  //         setSkillProposition(skillArray)\n  //         setSkillSelected(skillNameList[i])\n  //     }\n  //     const skillMap = []\n  //     for (const i in skillNameList) {\n  //         const skillClass = skillSelected === skillNameList[i] ?\n  //             'skill-selected' : 'skill-normal'\n  //         skillMap.push(\n  //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\n  //         )\n  //     }\n  //     return (\n  //         <div className=\"skills-container\">\n  //             {skillMap}\n  //         </div>\n  //     )\n  // }\n  // const imagesHTML = () => {\n  //     const allImages = []\n  //     for (const ind in imageLinkList) {\n  //         allImages.push(\n  //             <div className=\"PF-image-display-container\" key={`IL${ind}`}>\n  //                 <img className=\"PF-image-display\" src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\n  //                 <div onClick={() => removeImage(ind)} className=\"PF-skill-remove\" style={{height: '75px', lineHeight: '70px'}} >x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allImages.map(img => img)\n  // }\n  // const referenceLinksHTML = () => {\n  //     const allRL = []\n  //     for (const ind in referenceLinkList) {\n  //         allRL.push(\n  //             <div className=\"PF-link-container\" key={`RL${ind}`}>\n  //                 <a href={referenceLinkList[ind]} className=\"PF-reference-link neutralize-link\">{referenceLinkList[ind].split('/')[2]}</a>\n  //                 <div onClick={() => removeRL(ind)} className=\"PF-skill-remove\" style={{lineHeight: '30px'}}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allRL.map(rl => rl)\n  // }\n  // const groupCommType = () => {\n  //     const siteStats = websiteStats(groupContactLink.fields.value)\n  //     return (\n  //         <React.Fragment>\n  //             <a className=\"GCL-type\" href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\n  //             <input className=\"PF-search-input-normal\" id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\n  //         </React.Fragment>\n  //     )\n  // }\n  // const signInWarning = props.token ? null : (\n  //     <h3 className=\"warning-container\">must be signed in to add post</h3>\n  // )\n  // const onSuggestionClicked = (skill) => {\n  //     const skillToEnter = `${skill} `\n  //     setSkillName(skillToEnter)\n  // }\n  return __jsx(\"div\", {\n    className: \"post-form0-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }), signInWarning, __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"post-form0-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    className: \"pp-form-title\",\n    style: {\n      textAlign: 'start',\n      marginLeft: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 21\n    }\n  }, \"create post\"), __jsx(InputHeader, {\n    info: false,\n    title: \"title\",\n    color: \"white\",\n    inputFor: \"PF-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", _extends({\n    className: \"PF-search-input\",\n    id: \"PF-title\"\n  }, title.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 21\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"description\",\n    color: \"white\",\n    inputFor: \"PF-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 21\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 29\n    }\n  }, \"any links starting with (https://) or (http://) get decorated like this \", __jsx(\"a\", {\n    href: \"https://www.unilous.com/post-form/\",\n    className: \"p-link neutralize-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 105\n    }\n  }, \"http://decorated-link.com\")))), __jsx(\"textarea\", _extends({\n    className: \"PF-search-input\",\n    id: \"PF-description\"\n  }, description.fields, {\n    style: {\n      height: '100px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 21\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"color\",\n    color: \"white\",\n    inputFor: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 29\n    }\n  }, \"used sparingly to decorate the post\"))), __jsx(\"div\", {\n    className: \"PF-display-color\",\n    style: {\n      backgroundColor: pallette.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: \"PF-display-part\",\n    style: {\n      backgroundColor: pallette.color,\n      color: pallette.textColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 127\n    }\n  }, \"primary\")), __jsx(\"div\", {\n    className: \"PF-display-part\",\n    style: {\n      backgroundColor: pallette.higherColor,\n      color: pallette.textColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 133\n    }\n  }, \"secondary\"))), __jsx(\"div\", {\n    className: \"PF-input-colors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 21\n    }\n  }, colorsHTML), __jsx(InputHeader, {\n    info: true,\n    title: \"skills\",\n    color: \"white\",\n    inputFor: \"PF-skillName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 25\n    }\n  }, \"skills needed to execute the project\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 25\n    }\n  }, \"amount of people needed per skill\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: \"PF-skill-fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    className: \"PF-search-input\",\n    placeholder: \"skill name\",\n    id: \"PF-skillName\",\n    value: skillName,\n    onChange: e => setSkillName(e.target.value),\n    type: \"text\",\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 29\n    }\n  }), __jsx(\"input\", {\n    className: \"PF-search-input\",\n    placeholder: \"amount of help\",\n    value: skillCapacity,\n    onChange: e => setSkillCapacity(e.target.value),\n    type: \"number\",\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 29\n    }\n  }), __jsx(\"div\", {\n    className: \"PF-skill-sugg-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 29\n    }\n  }, __jsx(SkillSugg, {\n    query: skillName,\n    onSuggestionClicked: onSuggestionClicked,\n    style: {\n      gridColumn: '1/2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 33\n    }\n  }))), __jsx(\"h4\", {\n    onClick: () => addSkills(),\n    className: \"PF-field-submit standard-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 25\n    }\n  }, \"add skill\")), skillsHTML().map(s => s), __jsx(InputHeader, {\n    info: true,\n    title: \"contribution\",\n    color: \"white\",\n    inputFor: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 25\n    }\n  }, \"skill you contribute to the project\")), skillContribution(), __jsx(InputHeader, {\n    info: true,\n    title: \"group/contact link\",\n    color: \"white\",\n    inputFor: \"PF-GC-Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 25\n    }\n  }, \"link shown to users who have been accepted to join the project\"), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 29\n    }\n  }, \"group links recommended: \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 58\n    }\n  }, \"Slack\"), \", \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 82\n    }\n  }, \"Trello\"), \", \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 107\n    }\n  }, \"Discord\"), \", or \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 136\n    }\n  }, \"WhatsApp\")))), __jsx(\"div\", {\n    className: \"GCL-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 21\n    }\n  }, groupCommType()), __jsx(InputHeader, {\n    info: false,\n    title: \"images\",\n    color: \"white\",\n    inputFor: \"PF-imageLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", {\n    className: \"PF-search-input\",\n    type: \"url\",\n    placeholder: \"image link\",\n    id: \"PF-imageLinks\",\n    value: imageLink,\n    onChange: e => setImageLink(e.target.value),\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addImage(),\n    className: \"PF-field-submit standard-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  }, \"add image\"), __jsx(\"div\", {\n    className: \"PF-images-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 21\n    }\n  }, imagesHTML()), __jsx(InputHeader, {\n    info: false,\n    title: \"links\",\n    color: \"white\",\n    inputFor: \"PF-referenceLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", {\n    className: \"PF-search-input\",\n    type: \"url\",\n    id: \"PF-referenceLinks\",\n    value: referenceLink,\n    onChange: e => setReferenceLink(e.target.value),\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 21\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addRL(),\n    className: \"PF-field-submit standard-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, \"add link\"), referenceLinksHTML()), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"PF-submit standard-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      margin: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 76\n    }\n  }, \"create post\"))));\n};\n\nPostFormPage = withRouter(PostFormPage);\n\nconst mapStateToProps = state => {\n  return {\n    skillProposition: state.skillProposition,\n    currentUser: state.currentUser,\n    token: state.token\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  resetAlert\n})(PostFormPage);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/postformpage.js"],"names":["React","useState","connect","useMutation","CREATE_POST","useField","triggerAlert","palletteGenerator","websiteStats","withRouter","InputHeader","setAlert","resetAlert","SkillSugg","PostFormPage","props","signInWarning","e","handleSubmit","textAlign","marginLeft","title","fields","margin","description","height","width","backgroundColor","pallette","color","textColor","higherColor","colorsHTML","marginBottom","skillName","setSkillName","target","value","skillCapacity","setSkillCapacity","onSuggestionClicked","gridColumn","addSkills","skillsHTML","map","s","skillContribution","groupCommType","imageLink","setImageLink","addImage","imagesHTML","referenceLink","setReferenceLink","addRL","referenceLinksHTML","mapStateToProps","state","skillProposition","currentUser","token"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,iBAAjC,EAAoDC,YAApD,QAAwE,2BAAxE;AACA,OAAO,qCAAP;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,2BAArC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,IAAIC,YAAY,GAAIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { CREATE_POST } from '../../schemas/mutations'\r\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../../functions/functions'\r\nimport '../../static/css/pages/postForm.css'\r\nimport { withRouter } from 'react-router-dom'\r\nimport InputHeader from '../text-field/InputHeader'\r\nimport { setAlert, resetAlert } from '../../reducers/alertNotif'\r\nimport SkillSugg from '../text-field/SkillSugg'\r\n\r\nlet PostFormPage = (props) => {\r\n    // const title = useField('text')\r\n    // const description = useField('text')\r\n    // const [color, setColor] = useState(null)\r\n    // const groupContactLink = useField('url')\r\n\r\n    // const [skillName, setSkillName] = useState('')\r\n    // const [skillNameList, setSkillNameList] = useState([])\r\n    // const [skillCapacity, setSkillCapacity] = useState('')\r\n    // const [skillCapList, setSkillCapList] = useState([])\r\n    // const [imageLink, setImageLink] = useState('')\r\n    // const [imageLinkList, setImageLinkList] = useState([])\r\n    // const [referenceLink, setReferenceLink] = useState('')\r\n    // const [referenceLinkList, setReferenceLinkList] = useState([])\r\n\r\n    // const [skillProposition, setSkillProposition] = useState(null)\r\n    // const [skillSelected, setSkillSelected] = useState(null)\r\n\r\n    // const handleError = (e) => {\r\n    //     const message = e.message\r\n    //     if (message.includes('Response not successful')) {\r\n    //        triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n    //        return null \r\n    //     }\r\n    //     if (message.includes('Path `title` (')) {\r\n    //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('dup key: { title')) {\r\n    //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('duplicate description')) {\r\n    //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('minimum allowed length')) {\r\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('Path `description` (')) {\r\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('duplicate contactLink')) {\r\n    //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    // }\r\n    // const [createPost] = useMutation( CREATE_POST, {\r\n    //     onError: handleError\r\n    // })\r\n    // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\r\n    // const handleSubmit = async (e) => {\r\n    //     e.preventDefault()\r\n    //     if (!props.token) {\r\n    //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\r\n    //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     let cleanedTitle = []\r\n    //     for (const word of title.fields.value.split(' ')) {\r\n    //         if (word.length) cleanedTitle.push(word)\r\n    //     }\r\n    //     const postCreated = await createPost({\r\n    //         variables: {\r\n    //             title: cleanedTitle.join(' '),\r\n    //             user: props.currentUser._id,\r\n    //             skillNames: skillNameList,\r\n    //             skillCapacities: skillCapList,\r\n    //             skillFills: skillProposition,\r\n    //             description: description.fields.value,\r\n    //             contactLink: groupContactLink.fields.value,\r\n    //             color: color,\r\n    //             imageLinks: imageLinkList,\r\n    //             referenceLinks: referenceLinkList\r\n    //         }\r\n    //     })\r\n    //     if (postCreated) {\r\n    //         title.reset()\r\n    //         description.reset()\r\n    //         groupContactLink.reset()\r\n    //         setSkillName('')\r\n    //         setSkillNameList([])\r\n    //         setSkillCapacity('')\r\n    //         setSkillCapList([])\r\n    //         setImageLink('')\r\n    //         setImageLinkList([])\r\n    //         setReferenceLink('')\r\n    //         setReferenceLinkList([])\r\n    //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\r\n    //     }\r\n    // }\r\n    // const colors = [\r\n    //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\r\n    //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \r\n    //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \r\n    //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\r\n    // ]\r\n    // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className=\"color-ins\" style={{backgroundColor: c}} key={`PFC${c}`} />)\r\n    // const addSkills = () => {\r\n    //     let cleanedSkill = []\r\n    //     for (const word of skillName.split(' ')) {\r\n    //         if (word.length) cleanedSkill.push(word)\r\n    //     }\r\n    //     setSkillName(cleanedSkill.join(' '))\r\n    //     if (Number(skillCapacity)){\r\n    //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\r\n    //         setSkillName('')\r\n    //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\r\n    //         setSkillCapacity('')\r\n    //         setSkillProposition(null)\r\n    //         setSkillSelected(null)\r\n    //     }\r\n    // }\r\n    // const removeSkill = (ind) => {\r\n    //     const newSkillNameList = []\r\n    //     for (const i in skillNameList) {\r\n    //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\r\n    //     }\r\n    //     setSkillNameList(newSkillNameList)\r\n    //     const newSkillCapList = []\r\n    //     for (const i in skillCapList) {\r\n    //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\r\n    //     }\r\n    //     setSkillCapList(newSkillCapList)\r\n    //     const newSkillProposition = []\r\n    //     for (const i in props.skillProposition) {\r\n    //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\r\n    //     }\r\n    // }\r\n    \r\n    // const removeImage = (ind) => {\r\n    //     const newImageLinkList = []\r\n    //     for (const i in imageLinkList) {\r\n    //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\r\n    //     }\r\n    //     setImageLinkList(newImageLinkList)\r\n    // }\r\n    \r\n    // const addImage = () => {\r\n    //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\r\n    //         setImageLinkList(imageLinkList.concat(imageLink))\r\n    //         setImageLink('')\r\n    //     }\r\n    // }\r\n\r\n    // const removeRL = (ind) => {\r\n    //     const newReferenceLinkList = []\r\n    //     for (const i in referenceLinkList) {\r\n    //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\r\n    //     }\r\n    //     setReferenceLinkList(newReferenceLinkList)\r\n    // }\r\n\r\n    // const addRL = () => {\r\n    //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\r\n    //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\r\n    //         setReferenceLink('')\r\n    //     }\r\n    // }\r\n\r\n    // const skillsHTML = () => {\r\n    //     let skillsHTML = []\r\n    //     for (const ind in skillNameList) {\r\n    //         skillsHTML.push(\r\n    //             <div className=\"PF-skill-wrapper\" key={`PFS${skillNameList[ind]}`}>\r\n    //                 <div className=\"PF-skill-container\">\r\n    //                     <div className=\"PF-skill-name\">{skillNameList[ind]}</div>\r\n    //                     <div className=\"PF-skill-cap\">{skillCapList[ind]}</div>\r\n    //                 </div>\r\n    //                 <div className=\"PF-skill-remove\" onClick={() => removeSkill(ind)}>x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return skillsHTML\r\n    // }\r\n\r\n    // const skillContribution = () => {\r\n    //     if (!skillNameList.length) {\r\n    //         return <h4 className=\"PF-input-title\" style={{opacity: 0.7}}>must add skill first</h4>\r\n    //     }\r\n\r\n    //     const handleSkillSelect = (i) => {\r\n    //         const skillArray = Array(skillNameList.length).fill(0)\r\n    //         skillArray[i] = 1\r\n    //         setSkillProposition(skillArray)\r\n    //         setSkillSelected(skillNameList[i])\r\n    //     }\r\n\r\n    //     const skillMap = []\r\n    //     for (const i in skillNameList) {\r\n    //         const skillClass = skillSelected === skillNameList[i] ?\r\n    //             'skill-selected' : 'skill-normal'\r\n    //         skillMap.push(\r\n    //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\r\n    //         )\r\n    //     }\r\n\r\n    //     return (\r\n    //         <div className=\"skills-container\">\r\n    //             {skillMap}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const imagesHTML = () => {\r\n    //     const allImages = []\r\n    //     for (const ind in imageLinkList) {\r\n    //         allImages.push(\r\n    //             <div className=\"PF-image-display-container\" key={`IL${ind}`}>\r\n    //                 <img className=\"PF-image-display\" src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\r\n    //                 <div onClick={() => removeImage(ind)} className=\"PF-skill-remove\" style={{height: '75px', lineHeight: '70px'}} >x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return allImages.map(img => img)\r\n    // }\r\n\r\n    // const referenceLinksHTML = () => {\r\n    //     const allRL = []\r\n    //     for (const ind in referenceLinkList) {\r\n    //         allRL.push(\r\n    //             <div className=\"PF-link-container\" key={`RL${ind}`}>\r\n    //                 <a href={referenceLinkList[ind]} className=\"PF-reference-link neutralize-link\">{referenceLinkList[ind].split('/')[2]}</a>\r\n    //                 <div onClick={() => removeRL(ind)} className=\"PF-skill-remove\" style={{lineHeight: '30px'}}>x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return allRL.map(rl => rl)\r\n    // }\r\n    // const groupCommType = () => {\r\n    //     const siteStats = websiteStats(groupContactLink.fields.value)\r\n    //     return (\r\n    //         <React.Fragment>\r\n    //             <a className=\"GCL-type\" href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\r\n    //             <input className=\"PF-search-input-normal\" id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\r\n    //         </React.Fragment>\r\n    //     )\r\n    // }\r\n    // const signInWarning = props.token ? null : (\r\n    //     <h3 className=\"warning-container\">must be signed in to add post</h3>\r\n    // )\r\n    // const onSuggestionClicked = (skill) => {\r\n    //     const skillToEnter = `${skill} `\r\n    //     setSkillName(skillToEnter)\r\n    // }\r\n    return (\r\n        <div className=\"post-form0-container\">\r\n            <div className=\"navbar-height\" />\r\n            {signInWarning}\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                <div className=\"post-form0-form\">\r\n                    <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\r\n                    <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\r\n                    <input className=\"PF-search-input\" id=\"PF-title\" {...title.fields} />\r\n                    <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\r\n                        <ul style={{margin: 0}}>\r\n                            <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <textarea className=\"PF-search-input\" id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\r\n                    <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\r\n                        <ul style={{margin: 0}}>\r\n                            <li>used sparingly to decorate the post</li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className=\"PF-display-color\" style={{backgroundColor: pallette.color}} >\r\n                        <div className=\"PF-display-part\" style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\r\n                        <div className=\"PF-display-part\" style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\r\n                    </div>\r\n                    <div className=\"PF-input-colors\">\r\n                        {colorsHTML}\r\n                    </div>\r\n                    <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\r\n                    </InputHeader>\r\n                    <div>\r\n                        <div className=\"PF-skill-fields\">\r\n                            <input className=\"PF-search-input\" placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\r\n                            <input className=\"PF-search-input\" placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\r\n                            <div className=\"PF-skill-sugg-container\">\r\n                                <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\r\n                            </div>\r\n                        </div>\r\n                        <h4 onClick={() => addSkills()} className=\"PF-field-submit standard-hover\">add skill</h4>               \r\n                    </div>\r\n                    {skillsHTML().map(s => s)}\r\n                    <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\r\n                    </InputHeader>\r\n                    {skillContribution()}\r\n                    <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\r\n                        <ul style={{margin: 0}}>\r\n                            <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className=\"GCL-input\">\r\n                        {groupCommType()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\r\n                    <input className=\"PF-search-input\" type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addImage()} className=\"PF-field-submit standard-hover\">add image</h4>\r\n                    <div className=\"PF-images-container\">\r\n                        {imagesHTML()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\r\n                    <input className=\"PF-search-input\" type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addRL()} className=\"PF-field-submit standard-hover\">add link</h4>\r\n                    {referenceLinksHTML()}\r\n                </div>\r\n                <button type=\"submit\" className=\"PF-submit standard-hover\"><h2 style={{margin: '5px'}}>create post</h2></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nPostFormPage = withRouter(PostFormPage)\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        skillProposition: state.skillProposition,\r\n        currentUser: state.currentUser,\r\n        token: state.token\r\n\t}\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    { setAlert, resetAlert }\r\n)(PostFormPage)"]},"metadata":{},"sourceType":"module"}