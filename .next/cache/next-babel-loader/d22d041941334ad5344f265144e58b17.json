{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\user\\\\[username].js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'; // import { useQuery, useMutation } from '@apollo/react-hooks'\n// import { MAKE_NOTIFICATION } from '../../schemas/mutations'\n\nimport { FIND_POST } from '../../src/schemas/queries';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport UP from '../../styles/pages/userPage.module.css'; // import PostSmallList from '../post/PostSmallList'\n// import Loading from '../Loading'\n// import FormContainer from '../text-field/FormContainer'\n// import userIcon from '../../static/svg/userB.svg'\n// import ReferenceLink from '../text-field/ReferenceLink'\n// import { palletteGenerator, useField, triggerAlert } from '../../functions/functions'\n\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nconst UserPage = withRouter(_c = props => {\n  //   const [currentUser, setCurrentUser] = useState(null)\n  //   const message = useField('text')\n  //   const decodedUser = decodeURIComponent(props.userUsername)\n  //   const userQuery = useQuery(FIND_USER, {\n  //     variables: {username: decodedUser}\n  //   })\n  //   const onError = (e) => {\n  //     const eMessage = e.message\n  //     if (eMessage.includes('Path `message` (')) {\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n  //     }\n  //   }\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n  //     onError\n  //   })\n  //   const handleMessage = async () => {\n  //     if (!message.fields.value.length) {\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //       return null\n  //     }\n  //     const result = await sendMessage({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentUser._id,\n  //             message: message.fields.value,\n  //         }\n  //     })\n  //     if (result) {\n  //         message.reset()\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  //   const userConditions = () => {\n  //     const query = userQuery.data\n  //     const reducer = currentUser\n  //     if (!query) return null\n  //     if (!query.findUser) return null\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\n  //     return null\n  //   }\n  //   const user = userConditions()\n  //   useEffect(() => {\n  //     if (user) {\n  //       setCurrentUser(user)\n  //     }\n  //   }, [user, setCurrentUser])\n  //   if (!currentUser) {\n  //     return (\n  //       <div>\n  //           <div style={{height: '15vh'}}/>\n  //           <Loading />\n  //       </div>\n  //     )\n  //   }\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n  return __jsx(\"div\", {\n    className: 'UP.UP-container',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  });\n}); // const mapStateToProps = (state) => {\n// \treturn {\n//     currentUser: state.currentUser        \n// \t}\n// }\n// export default connect(\n//   mapStateToProps,\n//   {setAlert, resetAlert}\n// )(UserPage)\n\n_c2 = UserPage;\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport var __N_SSG = true;\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserPage$withRouter\");\n$RefreshReg$(_c2, \"UserPage\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/user/[username].js"],"names":["React","useState","useEffect","connect","FIND_POST","setAlert","resetAlert","UP","bindActionCreators","withRouter","Link","UserPage","props","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;;AACA,SAA+BC,SAA/B,QAAgD,2BAAhD;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,iCAArC;AACA,OAAOC,EAAP,MAAe,wCAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AAEA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,QAAQ,GAAGF,UAAU,MAAEG,KAAD,IAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SACE;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA+BH,CAzF0B,CAA3B,C,CA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAnGMD,Q;;AA6HN,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,UAAU,EAAED,KAAK,CAACC;AADb,GAAP;AAGD,CAJD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,QAAQ,EAAEG,kBAAkB,CAACH,QAAD,EAAWY,QAAX,CADvB;AAELX,IAAAA,UAAU,EAAEE,kBAAkB,CAACF,UAAD,EAAaW,QAAb;AAFzB,GAAP;AAID,CALD;;;AAOA,eAAed,OAAO,CACpBU,eADoB,EAEpBG,kBAFoB,CAAP,CAGbL,QAHa,CAAf,C,CAKA","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n// import { useQuery, useMutation } from '@apollo/react-hooks'\r\n// import { MAKE_NOTIFICATION } from '../../schemas/mutations'\r\nimport { FIND_USER, ALL_USERS, FIND_POST } from '../../src/schemas/queries'\r\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif'\r\nimport UP from '../../styles/pages/userPage.module.css';\r\n// import PostSmallList from '../post/PostSmallList'\r\n// import Loading from '../Loading'\r\n// import FormContainer from '../text-field/FormContainer'\r\n// import userIcon from '../../static/svg/userB.svg'\r\n// import ReferenceLink from '../text-field/ReferenceLink'\r\n// import { palletteGenerator, useField, triggerAlert } from '../../functions/functions'\r\nimport {bindActionCreators} from 'redux'\r\nimport {apolloClient} from '../../lib/apollo'\r\nimport {withRouter} from 'next/router'\r\nimport Link from 'next/link'\r\n\r\nconst UserPage = withRouter((props) => {\r\n  //   const [currentUser, setCurrentUser] = useState(null)\r\n  //   const message = useField('text')\r\n  //   const decodedUser = decodeURIComponent(props.userUsername)\r\n  //   const userQuery = useQuery(FIND_USER, {\r\n  //     variables: {username: decodedUser}\r\n  //   })\r\n  //   const onError = (e) => {\r\n  //     const eMessage = e.message\r\n  //     if (eMessage.includes('Path `message` (')) {\r\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\r\n  //     }\r\n  //   }\r\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\r\n  //     onError\r\n  //   })\r\n  //   const handleMessage = async () => {\r\n  //     if (!message.fields.value.length) {\r\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\r\n  //       return null\r\n  //     }\r\n  //     const result = await sendMessage({\r\n  //         variables: {\r\n  //             userFromId: props.currentUser._id,\r\n  //             userToId: currentUser._id,\r\n  //             message: message.fields.value,\r\n  //         }\r\n  //     })\r\n  //     if (result) {\r\n  //         message.reset()\r\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\r\n  //     }\r\n  // }\r\n\r\n  //   const userConditions = () => {\r\n  //     const query = userQuery.data\r\n  //     const reducer = currentUser\r\n  //     if (!query) return null\r\n  //     if (!query.findUser) return null\r\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\r\n  //     return null\r\n  //   }\r\n\r\n  //   const user = userConditions()\r\n  //   useEffect(() => {\r\n  //     if (user) {\r\n  //       setCurrentUser(user)\r\n  //     }\r\n  //   }, [user, setCurrentUser])\r\n  //   if (!currentUser) {\r\n  //     return (\r\n  //       <div>\r\n  //           <div style={{height: '15vh'}}/>\r\n  //           <Loading />\r\n  //       </div>\r\n  //     )\r\n  //   }\r\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\r\n    return (\r\n      <div className={'UP.UP-container'}>\r\n        {/* <h1 className={UP.test}>{props.user.username}</h1>\r\n        <h2>{props.user.referenceLink}</h2> */}\r\n        {/* <Link href=\"/postpage\"><a>PostPage</a></Link> */}\r\n        {/* <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\r\n        <div className={UP.UP-content}>\r\n          <div className={UP.UP-title-container}>\r\n            <img className={UP.UP-title-icon} src='/svg/userB.svg' alt=\"user\" />\r\n            <h2 className={UP.UP-title}>{currentUser.username}</h2>\r\n          </div>\r\n          <h3 className={UP.UP-title} style={{opacity: '0.8'}}>profile link</h3>\r\n          <ReferenceLink rl={currentUser.referenceLink} />\r\n          <h2 className={UP.UP-title}>posts</h2>\r\n          <div className={UP.UP-posts-container}>\r\n            <PostSmallList posts={currentUser.posts} />\r\n          </div>\r\n        </div>\r\n          <FormContainer pallette={pallette} >\r\n                <h3 className=\"form-title\">contact {currentUser.username}</h3>\r\n                <h4 className=\"form-title-secondary\">message</h4>\r\n                <div className=\"form-field-container\">\r\n                  <textarea className=\"form-field\" {...message.fields} />\r\n                </div >\r\n                <div className=\"form-submit-button-container\">\r\n                  \r\n                <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\r\n                </div>\r\n          </FormContainer> */}\r\n      </div>\r\n    )\r\n})\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//     currentUser: state.currentUser        \r\n// \t}\r\n// }\r\n// export default connect(\r\n//   mapStateToProps,\r\n//   {setAlert, resetAlert}\r\n// )(UserPage)\r\n\r\nexport async function getStaticPaths() {\r\n    const usernamesQuery = await apolloClient.query({query: ALL_USERS}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`)\r\n    return {\r\n        paths,\r\n        fallback: false\r\n    }\r\n}\r\n\r\nexport async function getStaticProps({params}) {\r\n  const userQuery = await apolloClient.query({\r\n    query: FIND_USER,\r\n    variables: {username: 'nesutortik'}\r\n  }).catch(err => console.log(err))\r\n  console.log(userQuery)\r\n  return {\r\n    props: {\r\n        post: \"hello\",\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    alertNotif: state.alertNotif\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setAlert: bindActionCreators(setAlert, dispatch),\r\n    resetAlert: bindActionCreators(resetAlert, dispatch),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserPage)\r\n\r\n// uses formContainer.css"]},"metadata":{},"sourceType":"module"}