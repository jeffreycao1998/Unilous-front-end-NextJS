{"ast":null,"code":"import { withApollo } from 'next-apollo';\nimport ApolloClient, { HttpLink, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context'; // const httpLink = createHttpLink({\n//     uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\n// })\n// const authLink = setContext((_, { headers }) => {\n//     const token = localStorage.getItem('token')\n//     return {\n//         headers: {\n//             ...headers,\n//             authorization: token ? `berySecret ${token}` : null,\n//         }\n//     }\n// })\n// const apolloClient = new ApolloClient({\n//     link: authLink.concat(httpLink),\n//     cache: new InMemoryCache()\n// })\n\nconst apolloClient = new ApolloClient({\n  uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n});\nexport default withApollo(apolloClient); // import React from 'react'\n// import Head from 'next/head'\n// import { ApolloProvider } from '@apollo/react-hooks'\n// import { ApolloClient } from 'apollo-client'\n// import { InMemoryCache } from 'apollo-cache-inmemory'\n// import { HttpLink } from 'apollo-link-http'\n// import fetch from 'isomorphic-unfetch'\n// let globalApolloClient = null\n// /**\n//  * Creates and provides the apolloContext\n//  * to a next.js PageTree. Use it by wrapping\n//  * your PageComponent via HOC pattern.\n//  * @param {Function|Class} PageComponent\n//  * @param {Object} [config]\n//  * @param {Boolean} [config.ssr=true]\n//  */\n// export default function withApollo(PageComponent, { ssr = true } = {}) {\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n//     const client = apolloClient || initApolloClient(apolloState)\n//     return (\n//       <ApolloProvider client={client}>\n//         <PageComponent {...pageProps} />\n//       </ApolloProvider>\n//     )\n//   }\n//   // Set the correct displayName in development\n//   if (process.env.NODE_ENV !== 'production') {\n//     const displayName =\n//       PageComponent.displayName || PageComponent.name || 'Component'\n//     if (displayName === 'App') {\n//       console.warn('This withApollo HOC only works with PageComponents.')\n//     }\n//     WithApollo.displayName = `withApollo(${displayName})`\n//   }\n//   if (ssr || PageComponent.getInitialProps) {\n//     WithApollo.getInitialProps = async ctx => {\n//       const { AppTree } = ctx\n//       // Initialize ApolloClient, add it to the ctx object so\n//       // we can use it in `PageComponent.getInitialProp`.\n//       const apolloClient = (ctx.apolloClient = initApolloClient())\n//       // Run wrapped getInitialProps methods\n//       let pageProps = {}\n//       if (PageComponent.getInitialProps) {\n//         pageProps = await PageComponent.getInitialProps(ctx)\n//       }\n//       // Only on the server:\n//       if (typeof window === 'undefined') {\n//         // When redirecting, the response is finished.\n//         // No point in continuing to render\n//         if (ctx.res && ctx.res.finished) {\n//           return pageProps\n//         }\n//         // Only if ssr is enabled\n//         if (ssr) {\n//           try {\n//             // Run all GraphQL queries\n//             const { getDataFromTree } = await import('@apollo/react-ssr')\n//             await getDataFromTree(\n//               <AppTree\n//                 pageProps={{\n//                   ...pageProps,\n//                   apolloClient,\n//                 }}\n//               />\n//             )\n//           } catch (error) {\n//             // Prevent Apollo Client GraphQL errors from crashing SSR.\n//             // Handle them in components via the data.error prop:\n//             // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n//             console.error('Error while running `getDataFromTree`', error)\n//           }\n//           // getDataFromTree does not call componentWillUnmount\n//           // head side effect therefore need to be cleared manually\n//           Head.rewind()\n//         }\n//       }\n//       // Extract query data from the Apollo store\n//       const apolloState = apolloClient.cache.extract()\n//       return {\n//         ...pageProps,\n//         apolloState,\n//       }\n//     }\n//   }\n//   return WithApollo\n// }\n// /**\n//  * Always creates a new apollo client on the server\n//  * Creates or reuses apollo client in the browser.\n//  * @param  {Object} initialState\n//  */\n// function initApolloClient(initialState) {\n//   // Make sure to create a new client for every server-side request so that data\n//   // isn't shared between connections (which would be bad)\n//   if (typeof window === 'undefined') {\n//     return createApolloClient(initialState)\n//   }\n//   // Reuse client on the client-side\n//   if (!globalApolloClient) {\n//     globalApolloClient = createApolloClient(initialState)\n//   }\n//   return globalApolloClient\n// }\n// /**\n//  * Creates and configures the ApolloClient\n//  * @param  {Object} [initialState={}]\n//  */\n// function createApolloClient(initialState = {}) {\n//   // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n//   return new ApolloClient({\n//     ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n//     link: new HttpLink({\n//       uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\n//       credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n//       fetch,\n//     }),\n//     cache: new InMemoryCache().restore(initialState),\n//   })\n// }","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/lib/apollo.js"],"names":["withApollo","ApolloClient","HttpLink","InMemoryCache","createHttpLink","setContext","apolloClient","uri","cache"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,aAAzB;AACA,OAAOC,YAAP,IAAsBC,QAAtB,EAAgCC,aAAhC,QAAoD,cAApD;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,UAAR,QAAyB,qBAAzB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,IAAIL,YAAJ,CAAiB;AACpCM,EAAAA,GAAG,EAAE,sDAD+B;AAEpCC,EAAAA,KAAK,EAAE,IAAIL,aAAJ;AAF6B,CAAjB,CAArB;AAKA,eAAeH,UAAU,CAACM,YAAD,CAAzsourcesContent":["import {withApollo} from 'next-apollo'\r\nimport ApolloClient, {HttpLink, InMemoryCache} from 'apollo-boost'\r\nimport {createHttpLink} from 'apollo-link-http'\r\nimport {setContext} from 'apollo-link-context'\r\n\r\n// const httpLink = createHttpLink({\r\n//     uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\r\n// })\r\n\r\n// const authLink = setContext((_, { headers }) => {\r\n//     const token = localStorage.getItem('token')\r\n//     return {\r\n//         headers: {\r\n//             ...headers,\r\n//             authorization: token ? `berySecret ${token}` : null,\r\n//         }\r\n//     }\r\n// })\r\n\r\n\r\n\r\n// const apolloClient = new ApolloClient({\r\n//     link: authLink.concat(httpLink),\r\n//     cache: new InMemoryCache()\r\n// })\r\n\r\nconst apolloClient = new ApolloClient({\r\n  uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nexport default withApollo(apolloClient)\r\n\r\n\r\n// import React from 'react'\r\n// import Head from 'next/head'\r\n// import { ApolloProvider } from '@apollo/react-hooks'\r\n// import { ApolloClient } from 'apollo-client'\r\n// import { InMemoryCache } from 'apollo-cache-inmemory'\r\n// import { HttpLink } from 'apollo-link-http'\r\n// import fetch from 'isomorphic-unfetch'\r\n\r\n// let globalApolloClient = null\r\n\r\n// /**\r\n//  * Creates and provides the apolloContext\r\n//  * to a next.js PageTree. Use it by wrapping\r\n//  * your PageComponent via HOC pattern.\r\n//  * @param {Function|Class} PageComponent\r\n//  * @param {Object} [config]\r\n//  * @param {Boolean} [config.ssr=true]\r\n//  */\r\n// export default function withApollo(PageComponent, { ssr = true } = {}) {\r\n//   const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\r\n//     const client = apolloClient || initApolloClient(apolloState)\r\n//     return (\r\n//       <ApolloProvider client={client}>\r\n//         <PageComponent {...pageProps} />\r\n//       </ApolloProvider>\r\n//     )\r\n//   }\r\n\r\n//   // Set the correct displayName in development\r\n//   if (process.env.NODE_ENV !== 'production') {\r\n//     const displayName =\r\n//       PageComponent.displayName || PageComponent.name || 'Component'\r\n\r\n//     if (displayName === 'App') {\r\n//       console.warn('This withApollo HOC only works with PageComponents.')\r\n//     }\r\n\r\n//     WithApollo.displayName = `withApollo(${displayName})`\r\n//   }\r\n\r\n//   if (ssr || PageComponent.getInitialProps) {\r\n//     WithApollo.getInitialProps = async ctx => {\r\n//       const { AppTree } = ctx\r\n\r\n//       // Initialize ApolloClient, add it to the ctx object so\r\n//       // we can use it in `PageComponent.getInitialProp`.\r\n//       const apolloClient = (ctx.apolloClient = initApolloClient())\r\n\r\n//       // Run wrapped getInitialProps methods\r\n//       let pageProps = {}\r\n//       if (PageComponent.getInitialProps) {\r\n//         pageProps = await PageComponent.getInitialProps(ctx)\r\n//       }\r\n\r\n//       // Only on the server:\r\n//       if (typeof window === 'undefined') {\r\n//         // When redirecting, the response is finished.\r\n//         // No point in continuing to render\r\n//         if (ctx.res && ctx.res.finished) {\r\n//           return pageProps\r\n//         }\r\n\r\n//         // Only if ssr is enabled\r\n//         if (ssr) {\r\n//           try {\r\n//             // Run all GraphQL queries\r\n//             const { getDataFromTree } = await import('@apollo/react-ssr')\r\n//             await getDataFromTree(\r\n//               <AppTree\r\n//                 pageProps={{\r\n//                   ...pageProps,\r\n//                   apolloClient,\r\n//                 }}\r\n//               />\r\n//             )\r\n//           } catch (error) {\r\n//             // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n//             // Handle them in components via the data.error prop:\r\n//             // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n//             console.error('Error while running `getDataFromTree`', error)\r\n//           }\r\n\r\n//           // getDataFromTree does not call componentWillUnmount\r\n//           // head side effect therefore need to be cleared manually\r\n//           Head.rewind()\r\n//         }\r\n//       }\r\n\r\n//       // Extract query data from the Apollo store\r\n//       const apolloState = apolloClient.cache.extract()\r\n\r\n//       return {\r\n//         ...pageProps,\r\n//         apolloState,\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return WithApollo\r\n// }\r\n\r\n// /**\r\n//  * Always creates a new apollo client on the server\r\n//  * Creates or reuses apollo client in the browser.\r\n//  * @param  {Object} initialState\r\n//  */\r\n// function initApolloClient(initialState) {\r\n//   // Make sure to create a new client for every server-side request so that data\r\n//   // isn't shared between connections (which would be bad)\r\n//   if (typeof window === 'undefined') {\r\n//     return createApolloClient(initialState)\r\n//   }\r\n\r\n//   // Reuse client on the client-side\r\n//   if (!globalApolloClient) {\r\n//     globalApolloClient = createApolloClient(initialState)\r\n//   }\r\n\r\n//   return globalApolloClient\r\n// }\r\n\r\n// /**\r\n//  * Creates and configures the ApolloClient\r\n//  * @param  {Object} [initialState={}]\r\n//  */\r\n// function createApolloClient(initialState = {}) {\r\n//   // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n//   return new ApolloClient({\r\n//     ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\r\n//     link: new HttpLink({\r\n//       uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\r\n//       credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\r\n//       fetch,\r\n//     }),\r\n//     cache: new InMemoryCache().restore(initialState),\r\n//   })\r\n// }"]},"metadata":{},"sourceType":"module"}