{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\results.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux'; // import { toggleStretchLayout } from '../src/reducers/stretchLayout'\n// import { setEventSearch } from '../src/reducers/eventSearch'\n// import covidIconB from '../src/static/svg/events/virusB.svg'\n// import covidIconW from '../src/static/svg/events/virusW.svg'\n// import covidIconC from '../src/static/svg/events/virusC.svg'\n// import usaIconB from '../src/static/svg/events/usaB.svg'\n// import usaIconW from '../src/static/svg/events/usaW.svg'\n// import usaIconC from '../src/static/svg/events/usaC.svg'\n\nimport { bindActionCreators } from 'redux';\nimport { apolloClient } from '../lib/apollo';\nimport { setToken } from '../redux/reducers/token';\nimport { ALL_POSTS, FIND_USER } from '../src/schemas/queries';\nimport resStyle from '../styles/pages/results.module.css';\n\nconst Results = props => {\n  let running;\n\n  if (true) {\n    running = 'client';\n  } else {\n    running = 'server'; // running = localStorage.getItem('running')\n  }\n\n  const Posts = () => {\n    return __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, props.posts.map(p => __jsx(\"li\", {\n      key: p.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, p.title))));\n  }; // const currentIds = props.posts ? props.posts.map(p => p._id) : []\n  // const [scrollAtBottom, setScrollAtBottom] = useState(false)\n  // const decodedSearch = decodeURIComponent(props.query)\n  // const SPQuery = useQuery(SEARCH_POSTS, {\n  //     variables: {\n  //         filterString: decodedSearch,\n  //         postIds: currentIds,\n  //         eventQuery: props.eventSearch,\n  //     }\n  // })\n  // const moreResults = () => {\n  //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\n  //         return false\n  //     }\n  //     return true\n  // }\n  // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //     setScrollAtBottom(true)\n  // }\n  // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //     setScrollAtBottom(false)\n  // }\n  // const triggerWhenScroll = () => {\n  //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //         setScrollAtBottom(true)\n  //     }\n  //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //         setScrollAtBottom(false)\n  //     }\n  // }\n  // window.addEventListener('scroll', triggerWhenScroll, false)\n  // const postChangeConditions = (query, reducer) => {\n  //     if (!scrollAtBottom) return false\n  //     if (!query) return false\n  //     if (!query.searchPosts) return false\n  //     if (!reducer) {\n  //         return true\n  //     }\n  //     const queryTitles = query.searchPosts.map(i => i.title)\n  //     const reducerTitles = reducer.map(i => i.title)\n  //     for (const title of queryTitles) {\n  //         if (!reducerTitles.includes(title)) {\n  //             return true\n  //         }\n  //     }\n  //     return false\n  // }\n  // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\n  //     SPQuery.data.searchPosts : null\n  // useEffect(() => {\n  //     if (postsSearched && !props.posts) {\n  //         props.addPosts(SPQuery.data.searchPosts)\n  //         setScrollAtBottom(false)\n  //     }\n  //     if (postsSearched && props.posts) {\n  //         if (postsSearched.length > 0) {\n  //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\n  //                 props.addPosts(SPQuery.data.searchPosts)\n  //                 setScrollAtBottom(false)\n  //             }\n  //         }\n  //     }\n  // }, [SPQuery, props.addPosts, props, postsSearched])\n  // if (!props.posts) {\n  //     return (\n  //         <div>\n  //             <div style={{height: '5vh'}}/>\n  //             <Loading />\n  //         </div>\n  //     )\n  // }\n  // const eventQuery = props.eventSearch\n  // const eventKeys = () => {\n  //     if (eventQuery === 'COVID-19') {\n  //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\n  //     }\n  //     if (eventQuery === '2020 Election') {\n  //         return ['election', 'democrat', 'republican', 'vote']\n  //     }\n  //     return null\n  // }\n  // const postToShow = (post, eventKeys) => {\n  //     if (eventKeys) {\n  //         for (const keyWord of eventKeys) {\n  //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\n  //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //             }\n  //         }\n  //         return false\n  //     }\n  //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //     for (const skill of post.skillNames) {\n  //         if (decodedSearch.includes(skill)) return true\n  //     }\n  //     return false\n  // }\n  // let postsToShow = props.posts\n  // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\n  // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\n  // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\n  // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\n  // const eventsList = [\n  //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: '/svg/events/virusW.svg', iconC: '/svg/events/virusC.svg',\n  //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: '/svg/events/usaW.svg', iconC: '/svg/events/usaC.svg' \n  // ]\n  // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \n  //     <div className={resStyle.eventSelected} onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconW} className={resStyle.eventImage} alt={e.name} />\n  //         <h3 className={resStyle.eventText}>{e.name}</h3>\n  //     </div>\n  //     :\n  //     <div className={resStyle.event} onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconC} className={resStyle.ventImage} alt={e.name} />\n  //         <h3 className={resStyle.eventText}>{e.name}</h3>\n  //     </div>\n  // )\n  // const eventsContainerClass = props.eventSearch ? {resStyle.EC-active} : null\n  // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\n\n\n  return __jsx(\"div\", {\n    className: \"homeWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: resStyle.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"Results\"), __jsx(\"button\", {\n    onClick: () => props.setToken('hello'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"set token to \\\"hello\\\"\"), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, \"token = \", props.token), __jsx(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"running on \", running), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Signed in as: \", props.user.username), __jsx(\"img\", {\n    src: \"/svg/bellB.svg\",\n    alt: \"bell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         posts: state.posts,\n//         search: state.search,\n//         stretchLayout: state.stretchLayout,\n//         eventSearch: state.eventSearch,\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { addPosts, toggleStretchLayout, setEventSearch }\n// )(Results)\n\n\n_c = Results;\n\nResults.getInitialProps = async context => {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: 'SebastianSosa'\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const postsQuery = await apolloClient.query({\n    query: ALL_POSTS\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  console.log(postsQuery);\n  return {\n    posts: postsQuery.data.allPosts,\n    user: userQuery.data.findUser\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setToken: bindActionCreators(setToken, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/results.js"],"names":["React","connect","bindActionCreators","apolloClient","setToken","ALL_POSTS","FIND_USER","resStyle","Results","props","running","Posts","posts","map","p","title","test","token","user","username","getInitialProps","context","userQuery","query","variables","then","res","catch","err","console","log","postsQuery","data","allPosts","findUser","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\n// import { toggleStretchLayout } from '../src/reducers/stretchLayout'\r\n// import { setEventSearch } from '../src/reducers/eventSearch'\r\n// import covidIconB from '../src/static/svg/events/virusB.svg'\r\n// import covidIconW from '../src/static/svg/events/virusW.svg'\r\n// import covidIconC from '../src/static/svg/events/virusC.svg'\r\n// import usaIconB from '../src/static/svg/events/usaB.svg'\r\n// import usaIconW from '../src/static/svg/events/usaW.svg'\r\n// import usaIconC from '../src/static/svg/events/usaC.svg'\r\nimport { bindActionCreators } from 'redux'\r\nimport { apolloClient } from '../lib/apollo'\r\nimport { setToken } from '../redux/reducers/token'\r\nimport { ALL_POSTS, FIND_USER } from '../src/schemas/queries'\r\nimport resStyle from '../styles/pages/results.module.css'\r\n\r\nconst Results = (props) => {\r\n    let running\r\n    if (typeof window !== 'undefined') {\r\n        running = 'client'\r\n    } else {\r\n        running = 'server'\r\n        // running = localStorage.getItem('running')\r\n    }\r\n    const Posts = () => {\r\n        return (\r\n            <ul>\r\n                {props.posts.map(p => (\r\n                    <li key={p.title}>\r\n                        <h3>{p.title}</h3>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n    // const currentIds = props.posts ? props.posts.map(p => p._id) : []\r\n    // const [scrollAtBottom, setScrollAtBottom] = useState(false)\r\n    // const decodedSearch = decodeURIComponent(props.query)\r\n    // const SPQuery = useQuery(SEARCH_POSTS, {\r\n    //     variables: {\r\n    //         filterString: decodedSearch,\r\n    //         postIds: currentIds,\r\n    //         eventQuery: props.eventSearch,\r\n    //     }\r\n    // })\r\n    // const moreResults = () => {\r\n    //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\r\n    //         return false\r\n    //     }\r\n    //     return true\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //     setScrollAtBottom(true)\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //     setScrollAtBottom(false)\r\n    // }\r\n    // const triggerWhenScroll = () => {\r\n    //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //         setScrollAtBottom(true)\r\n    //     }\r\n    //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    // }\r\n    // window.addEventListener('scroll', triggerWhenScroll, false)\r\n\r\n    // const postChangeConditions = (query, reducer) => {\r\n    //     if (!scrollAtBottom) return false\r\n    //     if (!query) return false\r\n    //     if (!query.searchPosts) return false\r\n    //     if (!reducer) {\r\n    //         return true\r\n    //     }\r\n    //     const queryTitles = query.searchPosts.map(i => i.title)\r\n    //     const reducerTitles = reducer.map(i => i.title)\r\n    //     for (const title of queryTitles) {\r\n    //         if (!reducerTitles.includes(title)) {\r\n    //             return true\r\n    //         }\r\n    //     }\r\n    //     return false\r\n    // }\r\n    // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\r\n    //     SPQuery.data.searchPosts : null\r\n    // useEffect(() => {\r\n    //     if (postsSearched && !props.posts) {\r\n    //         props.addPosts(SPQuery.data.searchPosts)\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    //     if (postsSearched && props.posts) {\r\n    //         if (postsSearched.length > 0) {\r\n    //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\r\n    //                 props.addPosts(SPQuery.data.searchPosts)\r\n    //                 setScrollAtBottom(false)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [SPQuery, props.addPosts, props, postsSearched])\r\n    // if (!props.posts) {\r\n    //     return (\r\n    //         <div>\r\n    //             <div style={{height: '5vh'}}/>\r\n    //             <Loading />\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const eventQuery = props.eventSearch\r\n    // const eventKeys = () => {\r\n    //     if (eventQuery === 'COVID-19') {\r\n    //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\r\n    //     }\r\n    //     if (eventQuery === '2020 Election') {\r\n    //         return ['election', 'democrat', 'republican', 'vote']\r\n    //     }\r\n    //     return null\r\n    // }\r\n    // const postToShow = (post, eventKeys) => {\r\n    //     if (eventKeys) {\r\n    //         for (const keyWord of eventKeys) {\r\n    //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\r\n    //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //             }\r\n    //         }\r\n    //         return false\r\n    //     }\r\n    //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //     for (const skill of post.skillNames) {\r\n    //         if (decodedSearch.includes(skill)) return true\r\n    //     }\r\n\r\n    //     return false\r\n    // }\r\n    // let postsToShow = props.posts\r\n    // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\r\n    // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\r\n    // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\r\n    // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\r\n    \r\n    // const eventsList = [\r\n    //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: '/svg/events/virusW.svg', iconC: '/svg/events/virusC.svg',\r\n    //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: '/svg/events/usaW.svg', iconC: '/svg/events/usaC.svg' \r\n    // ]\r\n    // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \r\n    //     <div className={resStyle.eventSelected} onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconW} className={resStyle.eventImage} alt={e.name} />\r\n    //         <h3 className={resStyle.eventText}>{e.name}</h3>\r\n    //     </div>\r\n    //     :\r\n    //     <div className={resStyle.event} onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconC} className={resStyle.ventImage} alt={e.name} />\r\n    //         <h3 className={resStyle.eventText}>{e.name}</h3>\r\n    //     </div>\r\n    // )\r\n    \r\n    // const eventsContainerClass = props.eventSearch ? {resStyle.EC-active} : null\r\n    // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\r\n    return (\r\n        <div className=\"homeWrapper\">\r\n            <h1 className={resStyle.test}>Results</h1>\r\n            <button onClick={() => props.setToken('hello')}>set token to \"hello\"</button>\r\n            <h2>token = {props.token}</h2>\r\n            <Posts />\r\n            <p>running on {running}</p>\r\n            <h4>Signed in as: {props.user.username}</h4>\r\n            <img src=\"/svg/bellB.svg\" alt=\"bell\" />\r\n            {/* <div className={resStyle.resultsContainer}>\r\n                <Link to=\"/post-form/\" className={`${resStyle.formContainerExpand} standard-hover neutralize-link`} title={props.setTitle}>\r\n                    <img className={resStyle.formExpandIcon} src={pallette.plusIcon} alt=\"team up\" />\r\n                </Link>\r\n                <div className=\"navbar-height\"/>\r\n                <h2 className={resStyle.secondaryTitle}>events</h2>\r\n                <div className={`${resStyle.eventsContainer} ${eventsContainerClass}`}>\r\n                    {eventsHTML}\r\n                </div>\r\n                <div onClick={() => props.toggleStretchLayout(!props.stretchLayout)} className={resStyle.layout-wrapper}>\r\n                    <div className={resStyle.layoutContainer}>\r\n                        <div className={`layoutButton ${layoutBtnClass}`} >\r\n                            <div className={resStyle.layoutBox}/>\r\n                            <div className={resStyle.layoutBox}/>\r\n                            <div className={resStyle.layoutBox}/>\r\n                            <div className={resStyle.layoutBox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div />\r\n                <div className={`resultsContent ${layoutClass}`}>\r\n                    {postsToShow}\r\n                </div>\r\n                <div style={{position: 'relative', height: '400px'}}>\r\n                    {showLoading}\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         posts: state.posts,\r\n//         search: state.search,\r\n//         stretchLayout: state.stretchLayout,\r\n//         eventSearch: state.eventSearch,\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { addPosts, toggleStretchLayout, setEventSearch }\r\n// )(Results)\r\nResults.getInitialProps = async (context) => {\r\n    const userQuery = await apolloClient.query({\r\n        query: FIND_USER,\r\n        variables: {username: 'SebastianSosa'}\r\n    }).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n\r\n    const postsQuery = await apolloClient.query({query: ALL_POSTS}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    console.log(postsQuery)\r\n\r\n    return {\r\n        posts: postsQuery.data.allPosts,\r\n        user: userQuery.data.findUser\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        token: state.token\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setToken: bindActionCreators(setToken, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Results)"]},"metadata":{},"sourceType":"module"}