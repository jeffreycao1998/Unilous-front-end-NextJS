{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\user\\\\[username].js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations';\nimport { FIND_USER, ALL_USERS, FIND_POST } from '../../src/schemas/queries';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport UP from '../../styles/pages/userPage.module.css';\nimport PostSmallList from '../../components/post/PostSmallList';\nimport Loading from '../../components/Loading';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport ReferenceLink from '../../components/text-field/ReferenceLink';\nimport { palletteGenerator, useField, triggerAlert } from '../../src/functions/functions';\nimport { bindActionCreators } from 'redux';\nimport { apolloClient } from '../../lib/apollo';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport Layout from '../../components/Layout';\nconst UserPage = withRouter(props => {\n  if (true) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 45\n    }\n  }, \"Rendering\");else {\n    const currentUser = props.user;\n    const message = useField('text');\n    const decodedUser = decodeURIComponent(props.userUsername);\n\n    const onError = e => {\n      const eMessage = e.message;\n\n      if (eMessage.includes('Path `message` (')) {\n        triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert);\n      }\n    };\n\n    const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n      onError\n    });\n\n    const handleMessage = async () => {\n      if (!message.fields.value.length) {\n        triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n        return null;\n      }\n\n      const result = await sendMessage({\n        variables: {\n          userFromId: props.currentUser._id,\n          userToId: currentUser._id,\n          message: message.fields.value\n        }\n      });\n\n      if (result) {\n        message.reset();\n        triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert);\n      }\n    };\n\n    const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette;\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: UP.UPContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"navbar-height\",\n      style: {\n        gridColumn: '1/3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: UP.UPContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: UP.UPTitleContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      className: UP.UPTitleIcon,\n      src: \"/svg/userB.svg\",\n      alt: \"user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }), __jsx(\"h2\", {\n      className: UP.UPTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, currentUser.username)), __jsx(\"h3\", {\n      className: UP.UPTitle,\n      style: {\n        opacity: '0.8'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"profile link\"), __jsx(ReferenceLink, {\n      rl: currentUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }), __jsx(\"h2\", {\n      className: UP.UPTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"posts\"), __jsx(\"div\", {\n      className: UP.UPPostsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, __jsx(PostSmallList, {\n      posts: currentUser.posts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }))), __jsx(FormContainer, {\n      pallette: pallette,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, __jsx(\"h3\", {\n      className: \"form-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"contact \", currentUser.username), __jsx(\"h4\", {\n      className: \"form-title-secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"message\"), __jsx(\"div\", {\n      className: \"form-field-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, __jsx(\"textarea\", _extends({\n      className: \"form-field\"\n    }, message.fields, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }))), __jsx(\"div\", {\n      className: \"form-submit-button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, __jsx(\"h4\", {\n      onClick: () => handleMessage(),\n      className: \"form-submit-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, \"send\")))));\n  }\n});\nexport async function getStaticPaths() {\n  const usernamesQuery = await apolloClient.query({\n    query: ALL_USERS\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: params.username\n    }\n  }).catch(err => console.log(err));\n  console.log(userQuery);\n  return {\n    props: {\n      user: userQuery.data.findUser\n    }\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/user/[username].js"],"names":["React","useState","useEffect","connect","useQuery","useMutation","MAKE_NOTIFICATION","FIND_USER","ALL_USERS","FIND_POST","setAlert","resetAlert","UP","PostSmallList","Loading","FormContainer","ReferenceLink","palletteGenerator","useField","triggerAlert","bindActionCreators","apolloClient","withRouter","Link","Layout","UserPage","props","currentUser","user","message","decodedUser","decodeURIComponent","userUsername","onError","e","eMessage","includes","fields","value","length","sendMessage","handleMessage","result","variables","userFromId","_id","userToId","reset","username","pallette","colorPallette","UPContainer","gridColumn","UPContent","UPTitleContainer","UPTitleIcon","UPTitle","opacity","UPPostsContainer","posts","getStaticPaths","usernamesQuery","query","then","res","catch","err","console","log","paths","data","allUsers","map","u","encodeURIComponent","fallback","getStaticProps","params","userQuery","findUser","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations'\r\nimport { FIND_USER, ALL_USERS, FIND_POST } from '../../src/schemas/queries'\r\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif'\r\nimport UP from '../../styles/pages/userPage.module.css';\r\nimport PostSmallList from '../../components/post/PostSmallList'\r\nimport Loading from '../../components/Loading'\r\nimport FormContainer from '../../components/text-field/FormContainer'\r\nimport ReferenceLink from '../../components/text-field/ReferenceLink'\r\nimport { palletteGenerator, useField, triggerAlert } from '../../src/functions/functions'\r\nimport {bindActionCreators} from 'redux'\r\nimport {apolloClient} from '../../lib/apollo'\r\nimport {withRouter} from 'next/router'\r\nimport Link from 'next/link'\r\nimport Layout from '../../components/Layout'\r\n\r\nconst UserPage = withRouter((props) => {\r\n  if (typeof window === 'undefined') return <h1>Rendering</h1>\r\n  else {\r\n    const currentUser = props.user\r\n    const message = useField('text')\r\n    const decodedUser = decodeURIComponent(props.userUsername)\r\n    const onError = (e) => {\r\n      const eMessage = e.message\r\n      if (eMessage.includes('Path `message` (')) {\r\n        triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\r\n      }\r\n    }\r\n    const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\r\n      onError\r\n    })\r\n    const handleMessage = async () => {\r\n      if (!message.fields.value.length) {\r\n        triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\r\n        return null\r\n      }\r\n      const result = await sendMessage({\r\n          variables: {\r\n              userFromId: props.currentUser._id,\r\n              userToId: currentUser._id,\r\n              message: message.fields.value,\r\n          }\r\n      })\r\n      if (result) {\r\n          message.reset()\r\n          triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\r\n      }\r\n    }\r\n    const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\r\n    return (\r\n      <Layout>\r\n        <div className={UP.UPContainer}>\r\n          <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\r\n          <div className={UP.UPContent}>\r\n            <div className={UP.UPTitleContainer}>\r\n              <img className={UP.UPTitleIcon} src=\"/svg/userB.svg\" alt=\"user\" />\r\n              <h2 className={UP.UPTitle}>{currentUser.username}</h2>\r\n            </div>\r\n            <h3 className={UP.UPTitle} style={{opacity: '0.8'}}>profile link</h3>\r\n            <ReferenceLink rl={currentUser} />\r\n            <h2 className={UP.UPTitle}>posts</h2>\r\n            <div className={UP.UPPostsContainer}>\r\n              <PostSmallList posts={currentUser.posts} />\r\n            </div>\r\n          </div>\r\n          {/* {currentUserUN !== currentUser.username && */}\r\n          <FormContainer pallette={pallette} >\r\n                <h3 className=\"form-title\">contact {currentUser.username}</h3>\r\n                <h4 className=\"form-title-secondary\">message</h4>\r\n                <div className=\"form-field-container\">\r\n                  <textarea className=\"form-field\" {...message.fields} />\r\n                </div >\r\n                <div className=\"form-submit-button-container\">\r\n                  \r\n                <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\r\n                </div>\r\n          </FormContainer>\r\n          {/* } */}\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n})\r\n\r\nexport async function getStaticPaths() {\r\n    const usernamesQuery = await apolloClient.query({query: ALL_USERS}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`)\r\n    return {\r\n        paths,\r\n        fallback: false\r\n    }\r\n}\r\n\r\nexport async function getStaticProps({params}) {\r\n  const userQuery = await apolloClient.query({\r\n    query: FIND_USER,\r\n    variables: {username: params.username}\r\n  }).catch(err => console.log(err))\r\n  console.log(userQuery)\r\n  return {\r\n    props: {\r\n      user: userQuery.data.findUser\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    alertNotif: state.alertNotif,\r\n    currentUser: state.currentUser\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setAlert: bindActionCreators(setAlert, dispatch),\r\n    resetAlert: bindActionCreators(resetAlert, dispatch),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserPage)\r\n\r\n// uses formContainer.css"]},"metadata":{},"sourceType":"module"}