{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\postformpage.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_POST } from '../src/schemas/mutations';\nimport { useField, triggerAlert, palletteGenerator } from '../src/functions/functions';\nimport PFP from '../styles/pages/postForm.module.css';\nimport { withRouter } from 'react-router-dom';\nimport InputHeader from '../components/text-field/InputHeader';\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif';\nimport SkillSugg from '../components/text-field/SkillSugg';\nimport { bindActionCreators } from 'redux';\n\nlet PostFormPage = props => {\n  const title = useField('text');\n  const description = useField('text');\n  const {\n    0: color,\n    1: setColor\n  } = useState(null);\n  const groupContactLink = useField('url');\n  const {\n    0: skillName,\n    1: setSkillName\n  } = useState('');\n  const {\n    0: skillNameList,\n    1: setSkillNameList\n  } = useState([]);\n  const {\n    0: skillCapacity,\n    1: setSkillCapacity\n  } = useState('');\n  const {\n    0: skillCapList,\n    1: setSkillCapList\n  } = useState([]);\n  const {\n    0: imageLink,\n    1: setImageLink\n  } = useState('');\n  const {\n    0: imageLinkList,\n    1: setImageLinkList\n  } = useState([]);\n  const {\n    0: referenceLink,\n    1: setReferenceLink\n  } = useState('');\n  const {\n    0: referenceLinkList,\n    1: setReferenceLinkList\n  } = useState([]);\n  const {\n    0: skillProposition,\n    1: setSkillProposition\n  } = useState(null);\n  const {\n    0: skillSelected,\n    1: setSkillSelected\n  } = useState(null);\n\n  const websiteStats = url => {\n    if (url.split('/').length < 3) {\n      return {\n        icon: '/svg/websites/input.svg',\n        color: '#484848',\n        title: 'unknown url'\n      };\n    }\n\n    const start = url.split('/')[2];\n\n    if (start.includes('unilous')) {\n      return {\n        icon: '/svg/websites/internet.svg',\n        color: '#282828',\n        title: 'Unilous'\n      };\n    }\n\n    if (start.includes('discord')) {\n      return {\n        icon: '/svg/websites/discord.svg',\n        color: '#7289DA',\n        title: 'Discord'\n      };\n    }\n\n    if (start.includes('trello')) {\n      return {\n        icon: '/svg/website/trello.svg',\n        color: '#0079BF',\n        title: 'Trello'\n      };\n    }\n\n    if (start.includes('whatsapp')) {\n      return {\n        icon: '/svg/websites/whatsapp.svg',\n        color: '#25D366',\n        title: 'WhatsApp'\n      };\n    }\n\n    if (start.includes('monday')) {\n      return {\n        icon: 'https://i.imgur.com/bgaQZc9.png',\n        color: '#333333',\n        title: 'Monday'\n      };\n    }\n\n    if (start.includes('slack')) {\n      return {\n        icon: '/svg/websites/slack.svg',\n        color: '#4A154B',\n        title: 'Slack'\n      };\n    }\n\n    if (start.includes('linkedin')) {\n      return {\n        icon: '/svg/svg/websites/linkedin.svg',\n        color: 'rgb(40,103,178)',\n        title: 'LinkedIn'\n      };\n    }\n\n    if (start.includes('facebook')) {\n      return {\n        icon: '/svg/websites/facebook.svg',\n        color: 'rgb(66,103,178)',\n        title: 'Facebook'\n      };\n    }\n\n    if (start.includes('indeed')) {\n      return {\n        icon: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fgohire-website.s3.amazonaws.com%2Fimg%2Fintegration-logos%2Findeed-icon.jpg&f=1&nofb=1',\n        color: '#282828',\n        title: 'Indeed'\n      };\n    }\n\n    if (start.includes('github')) {\n      return {\n        icon: '/svg/websites/gitHub.svg',\n        color: '#333',\n        title: 'GitHub'\n      };\n    }\n\n    return {\n      icon: '/svg/websites/internet.svg',\n      color: '#282828',\n      title: 'unknown url'\n    };\n  };\n\n  const handleError = e => {\n    const message = e.message;\n\n    if (message.includes('Response not successful')) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `title` (')) {\n      triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('dup key: { title')) {\n      triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate description')) {\n      triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('minimum allowed length')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `description` (')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate contactLink')) {\n      triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n  };\n\n  const [createPost] = useMutation(CREATE_POST, {\n    onError: handleError\n  });\n  const pallette = color ? palletteGenerator(color).colorPallette : {\n    color: null,\n    heigherColor: null\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!skillNameList.length || !groupContactLink.fields.value.length) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    let cleanedTitle = [];\n\n    for (const word of title.fields.value.split(' ')) {\n      if (word.length) cleanedTitle.push(word);\n    }\n\n    const postCreated = await createPost({\n      variables: {\n        title: cleanedTitle.join(' '),\n        user: props.currentUser._id,\n        skillNames: skillNameList,\n        skillCapacities: skillCapList,\n        skillFills: skillProposition,\n        description: description.fields.value,\n        contactLink: groupContactLink.fields.value,\n        color: color,\n        imageLinks: imageLinkList,\n        referenceLinks: referenceLinkList\n      }\n    });\n\n    if (postCreated) {\n      title.reset();\n      description.reset();\n      groupContactLink.reset();\n      setSkillName('');\n      setSkillNameList([]);\n      setSkillCapacity('');\n      setSkillCapList([]);\n      setImageLink('');\n      setImageLinkList([]);\n      setReferenceLink('');\n      setReferenceLinkList([]);\n      props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`);\n    }\n  };\n\n  const colors = ['rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)', 'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', 'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)', 'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'];\n  const colorsHTML = colors.map(c => __jsx(\"div\", {\n    onClick: () => setColor(c),\n    className: PFP.colorIns,\n    style: {\n      backgroundColor: c\n    },\n    key: `PFC${c}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 40\n    }\n  }));\n\n  const addSkills = () => {\n    let cleanedSkill = [];\n\n    for (const word of skillName.split(' ')) {\n      if (word.length) cleanedSkill.push(word);\n    }\n\n    setSkillName(cleanedSkill.join(' '));\n\n    if (Number(skillCapacity)) {\n      setSkillNameList(skillNameList.concat(skillName.toLowerCase()));\n      setSkillName('');\n      setSkillCapList(skillCapList.concat(Number(skillCapacity)));\n      setSkillCapacity('');\n      setSkillProposition(null);\n      setSkillSelected(null);\n    }\n  };\n\n  const removeSkill = ind => {\n    const newSkillNameList = [];\n\n    for (const i in skillNameList) {\n      if (i !== ind) {\n        newSkillNameList.push(skillNameList[i]);\n      }\n    }\n\n    setSkillNameList(newSkillNameList);\n    const newSkillCapList = [];\n\n    for (const i in skillCapList) {\n      if (i !== ind) {\n        newSkillCapList.push(skillCapList[i]);\n      }\n    }\n\n    setSkillCapList(newSkillCapList);\n    const newSkillProposition = [];\n\n    for (const i in props.skillProposition) {\n      if (i !== ind) {\n        newSkillProposition.push(props.skillProposition[i]);\n      }\n    }\n  };\n\n  const removeImage = ind => {\n    const newImageLinkList = [];\n\n    for (const i in imageLinkList) {\n      if (i !== ind) {\n        newImageLinkList.push(imageLinkList[i]);\n      }\n    }\n\n    setImageLinkList(newImageLinkList);\n  };\n\n  const addImage = () => {\n    if (imageLink.includes('https://') || imageLink.includes('http://')) {\n      setImageLinkList(imageLinkList.concat(imageLink));\n      setImageLink('');\n    }\n  };\n\n  const removeRL = ind => {\n    const newReferenceLinkList = [];\n\n    for (const i in referenceLinkList) {\n      if (i !== ind) {\n        newReferenceLinkList.push(referenceLinkList[i]);\n      }\n    }\n\n    setReferenceLinkList(newReferenceLinkList);\n  };\n\n  const addRL = () => {\n    if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n      setReferenceLinkList(referenceLinkList.concat(referenceLink));\n      setReferenceLink('');\n    }\n  };\n\n  const skillsHTML = () => {\n    let skillsHTML = [];\n\n    for (const ind in skillNameList) {\n      skillsHTML.push(__jsx(\"div\", {\n        className: PFP.PFSkillWrapper,\n        key: `PFS${skillNameList[ind]}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }\n      }, skillNameList[ind]), __jsx(\"div\", {\n        className: PFP.PFSkillCap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }\n      }, skillCapList[ind])), __jsx(\"div\", {\n        className: PFP.PFSkillRemove,\n        onClick: () => removeSkill(ind),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return skillsHTML;\n  };\n\n  const skillContribution = () => {\n    if (!skillNameList.length) {\n      return __jsx(\"h4\", {\n        className: PFP.PFInputTitle,\n        style: {\n          opacity: 0.7\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 20\n        }\n      }, \"must add skill first\");\n    }\n\n    const handleSkillSelect = i => {\n      const skillArray = Array(skillNameList.length).fill(0);\n      skillArray[i] = 1;\n      setSkillProposition(skillArray);\n      setSkillSelected(skillNameList[i]);\n    };\n\n    const skillMap = [];\n\n    for (const i in skillNameList) {\n      const skillClass = skillSelected === skillNameList[i] ? 'PFP.skill-selected' : 'PFP.skill-normal';\n      skillMap.push(__jsx(\"h4\", {\n        onClick: () => handleSkillSelect(i, skillNameList[i]),\n        className: skillClass,\n        key: `SKILL${i}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }\n      }, skillNameList[i]));\n    }\n\n    return __jsx(\"div\", {\n      className: PFP.skillsContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, skillMap);\n  };\n\n  const imagesHTML = () => {\n    const allImages = [];\n\n    for (const ind in imageLinkList) {\n      allImages.push(__jsx(\"div\", {\n        className: PFP.PFImageDisplayContainer,\n        key: `IL${ind}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }\n      }, __jsx(\"img\", {\n        className: PFP.PFImageDisplay,\n        src: imageLinkList[ind],\n        alt: `(${imageLinkList[ind]}) failed to load`,\n        key: `IL${imageLinkList[ind]}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }\n      }), __jsx(\"div\", {\n        onClick: () => removeImage(ind),\n        className: PFP.PFSkillRemove,\n        style: {\n          height: '75px',\n          lineHeight: '70px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return allImages.map(img => img);\n  };\n\n  const referenceLinksHTML = () => {\n    const allRL = [];\n\n    for (const ind in referenceLinkList) {\n      allRL.push(__jsx(\"div\", {\n        className: PFP.PFLinkContainer,\n        key: `RL${ind}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        href: referenceLinkList[ind],\n        className: `${PFP.PFReferenceLink} neutralize-link`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }\n      }, referenceLinkList[ind].split('/')[2]), __jsx(\"div\", {\n        onClick: () => removeRL(ind),\n        className: PFP.PFSkillRemove,\n        style: {\n          lineHeight: '30px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }\n      }, \"x\")));\n    }\n\n    return allRL.map(rl => rl);\n  };\n\n  const groupCommType = () => {\n    const siteStats = websiteStats(groupContactLink.fields.value);\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      className: PFP.GCLType,\n      href: groupContactLink.fields.value,\n      title: siteStats.title,\n      style: {\n        backgroundColor: siteStats.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      className: PFP.GCLImage,\n      src: '/svg/websites/internet.svg',\n      alt: siteStats.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 148\n      }\n    })), __jsx(\"input\", _extends({\n      className: PFP.PFSearchInputNormal,\n      id: \"PF-GC-Link\"\n    }, groupContactLink.fields, {\n      style: {\n        marginBottom: 0,\n        borderColor: siteStats.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }\n    })));\n  };\n\n  const signInWarning = props.token ? null : __jsx(\"h3\", {\n    className: \"warning-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, \"must be signed in to add post\");\n\n  const onSuggestionClicked = skill => {\n    const skillToEnter = `${skill} `;\n    setSkillName(skillToEnter);\n  };\n\n  return __jsx(\"div\", {\n    className: \"post-form0-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }), signInWarning, __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: PFP.postForm0Form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    className: \"ppFormTitle\",\n    style: {\n      textAlign: 'start',\n      marginLeft: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 21\n    }\n  }, \"create post\"), __jsx(InputHeader, {\n    info: false,\n    title: \"title\",\n    color: \"white\",\n    inputFor: \"PF-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PFTitle\"\n  }, title.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 21\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"description\",\n    color: \"white\",\n    inputFor: \"PF-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 29\n    }\n  }, \"any links starting with (https://) or (http://) get decorated like this \", __jsx(\"a\", {\n    href: \"https://www.unilous.com/post-form/\",\n    className: \"p-link neutralize-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 105\n    }\n  }, \"http://decorated-link.com\")))), __jsx(\"textarea\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PF-description\"\n  }, description.fields, {\n    style: {\n      height: '100px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 21\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"color\",\n    color: \"white\",\n    inputFor: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 21\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 29\n    }\n  }, \"used sparingly to decorate the post\"))), __jsx(\"div\", {\n    className: PFP.PFDisplayColor,\n    style: {\n      backgroundColor: pallette.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.color,\n      color: pallette.textColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 129\n    }\n  }, \"primary\")), __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.higherColor,\n      color: pallette.textColor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 135\n    }\n  }, \"secondary\"))), __jsx(\"div\", {\n    className: PFP.PFInputColors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, colorsHTML), __jsx(InputHeader, {\n    info: true,\n    title: \"skills\",\n    color: \"white\",\n    inputFor: \"PF-skillName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 25\n    }\n  }, \"skills needed to execute the project\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 25\n    }\n  }, \"amount of people needed per skill\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: PFP.PFSkillFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"skill name\",\n    id: \"PF-skillName\",\n    value: skillName,\n    onChange: e => setSkillName(e.target.value),\n    type: \"text\",\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 29\n    }\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"amount of help\",\n    value: skillCapacity,\n    onChange: e => setSkillCapacity(e.target.value),\n    type: \"number\",\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 29\n    }\n  }), __jsx(\"div\", {\n    className: PFP.PFSkillSuggContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }\n  }, __jsx(SkillSugg, {\n    query: skillName,\n    onSuggestionClicked: onSuggestionClicked,\n    style: {\n      gridColumn: '1/2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 33\n    }\n  }))), __jsx(\"h4\", {\n    onClick: () => addSkills(),\n    className: `${PFP.PFFieldSubmit} standard-hover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 25\n    }\n  }, \"add skill\")), skillsHTML().map(s => s), __jsx(InputHeader, {\n    info: true,\n    title: \"contribution\",\n    color: \"white\",\n    inputFor: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 25\n    }\n  }, \"skill you contribute to the project\")), skillContribution(), __jsx(InputHeader, {\n    info: true,\n    title: \"group/contact link\",\n    color: \"white\",\n    inputFor: \"PF-GC-Link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 21\n    }\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 25\n    }\n  }, \"link shown to users who have been accepted to join the project\"), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 29\n    }\n  }, \"group links recommended: \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 58\n    }\n  }, \"Slack\"), \", \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 82\n    }\n  }, \"Trello\"), \", \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 107\n    }\n  }, \"Discord\"), \", or \", __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 136\n    }\n  }, \"WhatsApp\")))), __jsx(\"div\", {\n    className: PFP.GCLInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 21\n    }\n  }, groupCommType()), __jsx(InputHeader, {\n    info: false,\n    title: \"images\",\n    color: \"white\",\n    inputFor: \"PF-imageLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    placeholder: \"image link\",\n    id: \"PF-imageLinks\",\n    value: imageLink,\n    onChange: e => setImageLink(e.target.value),\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 21\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addImage(),\n    className: `${PFP.PFFieldSubmit} standard-hover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 21\n    }\n  }, \"add image\"), __jsx(\"div\", {\n    className: PFP.PFImagesContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 21\n    }\n  }, imagesHTML()), __jsx(InputHeader, {\n    info: false,\n    title: \"links\",\n    color: \"white\",\n    inputFor: \"PF-referenceLinks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 21\n    }\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    id: \"PF-referenceLinks\",\n    value: referenceLink,\n    onChange: e => setReferenceLink(e.target.value),\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addRL(),\n    className: `${PFP.PFFieldSubmit} standard-hover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 21\n    }\n  }, \"add link\"), referenceLinksHTML()), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    src: \"/svg/websites/whatsapp.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 21\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    className: `${PFP.PFSubmit} standard-hover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      margin: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 84\n    }\n  }, \"create post\"))));\n}; // PostFormPage = withRouter(PostFormPage)\n// const mapStateToProps = (state) => {\n// \treturn {\n//         skillProposition: state.skillProposition,\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { setAlert, resetAlert }\n// )(PostFormPage)\n\n\nconst mapStateToProps = state => {\n  return {\n    alert: state.alert\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostFormPage);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/postformpage.js"],"names":["React","useState","connect","useMutation","CREATE_POST","useField","triggerAlert","palletteGenerator","PFP","withRouter","InputHeader","setAlert","resetAlert","SkillSugg","bindActionCreators","PostFormPage","props","title","description","color","setColor","groupContactLink","skillName","setSkillName","skillNameList","setSkillNameList","skillCapacity","setSkillCapacity","skillCapList","setSkillCapList","imageLink","setImageLink","imageLinkList","setImageLinkList","referenceLink","setReferenceLink","referenceLinkList","setReferenceLinkList","skillProposition","setSkillProposition","skillSelected","setSkillSelected","websiteStats","url","split","length","icon","start","includes","handleError","e","message","fields","value","createPost","onError","pallette","colorPallette","heigherColor","handleSubmit","preventDefault","token","cleanedTitle","word","push","postCreated","variables","join","user","currentUser","_id","skillNames","skillCapacities","skillFills","contactLink","imageLinks","referenceLinks","reset","history","encodeURIComponent","data","addPost","colors","colorsHTML","map","c","colorIns","backgroundColor","addSkills","cleanedSkill","Number","concat","toLowerCase","removeSkill","ind","newSkillNameList","i","newSkillCapList","newSkillProposition","removeImage","newImageLinkList","addImage","removeRL","newReferenceLinkList","addRL","skillsHTML","PFSkillWrapper","PFSkillContainer","PFSkillName","PFSkillCap","PFSkillRemove","skillContribution","PFInputTitle","opacity","handleSkillSelect","skillArray","Array","fill","skillMap","skillClass","skillsContainer","imagesHTML","allImages","PFImageDisplayContainer","PFImageDisplay","height","lineHeight","img","referenceLinksHTML","allRL","PFLinkContainer","PFReferenceLink","rl","groupCommType","siteStats","GCLType","GCLImage","PFSearchInputNormal","marginBottom","borderColor","signInWarning","onSuggestionClicked","skill","skillToEnter","postForm0Form","textAlign","marginLeft","PFSearchInput","margin","width","PFDisplayColor","PFDisplayPart","textColor","higherColor","PFInputColors","PFSkillFields","target","PFSkillSuggContainer","gridColumn","PFFieldSubmit","s","GCLInput","PFImagesContainer","PFSubmit","mapStateToProps","state","alert","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { CREATE_POST } from '../src/schemas/mutations'\r\nimport { useField, triggerAlert, palletteGenerator } from '../src/functions/functions'\r\nimport PFP from '../styles/pages/postForm.module.css'\r\nimport { withRouter } from 'react-router-dom'\r\nimport InputHeader from '../components/text-field/InputHeader'\r\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif'\r\nimport SkillSugg from '../components/text-field/SkillSugg'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nlet PostFormPage = (props) => {\r\n    const title = useField('text')\r\n    const description = useField('text')\r\n    const [color, setColor] = useState(null)\r\n    const groupContactLink = useField('url')\r\n\r\n    const [skillName, setSkillName] = useState('')\r\n    const [skillNameList, setSkillNameList] = useState([])\r\n    const [skillCapacity, setSkillCapacity] = useState('')\r\n    const [skillCapList, setSkillCapList] = useState([])\r\n    const [imageLink, setImageLink] = useState('')\r\n    const [imageLinkList, setImageLinkList] = useState([])\r\n    const [referenceLink, setReferenceLink] = useState('')\r\n    const [referenceLinkList, setReferenceLinkList] = useState([])\r\n\r\n    const [skillProposition, setSkillProposition] = useState(null)\r\n    const [skillSelected, setSkillSelected] = useState(null)\r\n    \r\n    const websiteStats = (url) => {\r\n        if (url.split('/').length < 3) {\r\n            return {icon: '/svg/websites/input.svg', color: '#484848',title: 'unknown url'}\r\n        }\r\n        const start = url.split('/')[2]\r\n        if (start.includes('unilous')) {\r\n            return {icon: '/svg/websites/internet.svg', color: '#282828', title: 'Unilous'}\r\n        }\r\n        if (start.includes('discord')) {\r\n            return {icon: '/svg/websites/discord.svg', color: '#7289DA', title: 'Discord'}\r\n        }\r\n        if (start.includes('trello')) {\r\n            return {icon: '/svg/website/trello.svg', color: '#0079BF', title: 'Trello'}\r\n        }\r\n        if (start.includes('whatsapp')) {\r\n            return {icon: '/svg/websites/whatsapp.svg', color: '#25D366', title: 'WhatsApp'}\r\n        }\r\n        if (start.includes('monday')) {\r\n            return {icon: 'https://i.imgur.com/bgaQZc9.png', color: '#333333', title: 'Monday'}\r\n        }\r\n        if (start.includes('slack')) {\r\n            return {icon: '/svg/websites/slack.svg', color: '#4A154B', title: 'Slack'}\r\n        }\r\n        if (start.includes('linkedin')) {\r\n            return {icon: '/svg/svg/websites/linkedin.svg', color: 'rgb(40,103,178)', title: 'LinkedIn'}\r\n        }\r\n        if (start.includes('facebook')) {\r\n            return {icon: '/svg/websites/facebook.svg', color: 'rgb(66,103,178)', title: 'Facebook'}\r\n        }\r\n        if (start.includes('indeed')) {\r\n            return {icon: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fgohire-website.s3.amazonaws.com%2Fimg%2Fintegration-logos%2Findeed-icon.jpg&f=1&nofb=1', color: '#282828', title: 'Indeed'}\r\n        }\r\n        if (start.includes('github')) {\r\n            return {icon: '/svg/websites/gitHub.svg', color: '#333', title: 'GitHub'}\r\n        }\r\n        return {icon: '/svg/websites/internet.svg', color: '#282828',title: 'unknown url'}\r\n    }\r\n\r\n    const handleError = (e) => {\r\n        const message = e.message\r\n        if (message.includes('Response not successful')) {\r\n            triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n            return null \r\n        }\r\n        if (message.includes('Path `title` (')) {\r\n            triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (message.includes('dup key: { title')) {\r\n            triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (message.includes('duplicate description')) {\r\n            triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (message.includes('minimum allowed length')) {\r\n            triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (message.includes('Path `description` (')) {\r\n            triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (message.includes('duplicate contactLink')) {\r\n            triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n    }\r\n    const [createPost] = useMutation( CREATE_POST, {\r\n        onError: handleError\r\n    })\r\n    const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (!props.token) {\r\n            triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (!skillNameList.length || !groupContactLink.fields.value.length) {\r\n            triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        let cleanedTitle = []\r\n        for (const word of title.fields.value.split(' ')) {\r\n            if (word.length) cleanedTitle.push(word)\r\n        }\r\n        const postCreated = await createPost({\r\n            variables: {\r\n                title: cleanedTitle.join(' '),\r\n                user: props.currentUser._id,\r\n                skillNames: skillNameList,\r\n                skillCapacities: skillCapList,\r\n                skillFills: skillProposition,\r\n                description: description.fields.value,\r\n                contactLink: groupContactLink.fields.value,\r\n                color: color,\r\n                imageLinks: imageLinkList,\r\n                referenceLinks: referenceLinkList\r\n            }\r\n        })\r\n        if (postCreated) {\r\n            title.reset()\r\n            description.reset()\r\n            groupContactLink.reset()\r\n            setSkillName('')\r\n            setSkillNameList([])\r\n            setSkillCapacity('')\r\n            setSkillCapList([])\r\n            setImageLink('')\r\n            setImageLinkList([])\r\n            setReferenceLink('')\r\n            setReferenceLinkList([])\r\n            props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\r\n        }\r\n    }\r\n    const colors = [\r\n        'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\r\n        'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \r\n        'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \r\n        'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\r\n    ]\r\n    const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className={PFP.colorIns} style={{backgroundColor: c}} key={`PFC${c}`} />)\r\n    const addSkills = () => {\r\n        let cleanedSkill = []\r\n        for (const word of skillName.split(' ')) {\r\n            if (word.length) cleanedSkill.push(word)\r\n        }\r\n        setSkillName(cleanedSkill.join(' '))\r\n        if (Number(skillCapacity)){\r\n            setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\r\n            setSkillName('')\r\n            setSkillCapList(skillCapList.concat(Number(skillCapacity)))\r\n            setSkillCapacity('')\r\n            setSkillProposition(null)\r\n            setSkillSelected(null)\r\n        }\r\n    }\r\n    const removeSkill = (ind) => {\r\n        const newSkillNameList = []\r\n        for (const i in skillNameList) {\r\n            if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\r\n        }\r\n        setSkillNameList(newSkillNameList)\r\n        const newSkillCapList = []\r\n        for (const i in skillCapList) {\r\n            if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\r\n        }\r\n        setSkillCapList(newSkillCapList)\r\n        const newSkillProposition = []\r\n        for (const i in props.skillProposition) {\r\n            if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\r\n        }\r\n    }\r\n    \r\n    const removeImage = (ind) => {\r\n        const newImageLinkList = []\r\n        for (const i in imageLinkList) {\r\n            if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\r\n        }\r\n        setImageLinkList(newImageLinkList)\r\n    }\r\n    \r\n    const addImage = () => {\r\n        if (imageLink.includes('https://') || imageLink.includes('http://')) {\r\n            setImageLinkList(imageLinkList.concat(imageLink))\r\n            setImageLink('')\r\n        }\r\n    }\r\n\r\n    const removeRL = (ind) => {\r\n        const newReferenceLinkList = []\r\n        for (const i in referenceLinkList) {\r\n            if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\r\n        }\r\n        setReferenceLinkList(newReferenceLinkList)\r\n    }\r\n\r\n    const addRL = () => {\r\n        if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\r\n            setReferenceLinkList(referenceLinkList.concat(referenceLink))\r\n            setReferenceLink('')\r\n        }\r\n    }\r\n\r\n    const skillsHTML = () => {\r\n        let skillsHTML = []\r\n        for (const ind in skillNameList) {\r\n            skillsHTML.push(\r\n                <div className={PFP.PFSkillWrapper} key={`PFS${skillNameList[ind]}`}>\r\n                    <div className={PFP.PFSkillContainer}>\r\n                        <div className={PFP.PFSkillName}>{skillNameList[ind]}</div>\r\n                        <div className={PFP.PFSkillCap}>{skillCapList[ind]}</div>\r\n                    </div>\r\n                    <div className={PFP.PFSkillRemove} onClick={() => removeSkill(ind)}>x</div>\r\n                </div>\r\n            )\r\n        }\r\n        return skillsHTML\r\n    }\r\n\r\n    const skillContribution = () => {\r\n        if (!skillNameList.length) {\r\n            return <h4 className={PFP.PFInputTitle} style={{opacity: 0.7}}>must add skill first</h4>\r\n        }\r\n\r\n        const handleSkillSelect = (i) => {\r\n            const skillArray = Array(skillNameList.length).fill(0)\r\n            skillArray[i] = 1\r\n            setSkillProposition(skillArray)\r\n            setSkillSelected(skillNameList[i])\r\n        }\r\n\r\n        const skillMap = []\r\n        for (const i in skillNameList) {\r\n            const skillClass = skillSelected === skillNameList[i] ?\r\n                'PFP.skill-selected' : 'PFP.skill-normal'\r\n            skillMap.push(\r\n                <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className={PFP.skillsContainer}>\r\n                {skillMap}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const imagesHTML = () => {\r\n        const allImages = []\r\n        for (const ind in imageLinkList) {\r\n            allImages.push(\r\n                <div className={PFP.PFImageDisplayContainer} key={`IL${ind}`}>\r\n                    <img className={PFP.PFImageDisplay} src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\r\n                    <div onClick={() => removeImage(ind)} className={PFP.PFSkillRemove} style={{height: '75px', lineHeight: '70px'}} >x</div>\r\n                </div>\r\n            )\r\n        }\r\n        return allImages.map(img => img)\r\n    }\r\n\r\n    const referenceLinksHTML = () => {\r\n        const allRL = []\r\n        for (const ind in referenceLinkList) {\r\n            allRL.push(\r\n                <div className={PFP.PFLinkContainer} key={`RL${ind}`}>\r\n                    <a href={referenceLinkList[ind]} className={`${PFP.PFReferenceLink} neutralize-link`}>{referenceLinkList[ind].split('/')[2]}</a>\r\n                    <div onClick={() => removeRL(ind)} className={PFP.PFSkillRemove} style={{lineHeight: '30px'}}>x</div>\r\n                </div>\r\n            )\r\n        }\r\n        return allRL.map(rl => rl)\r\n    }\r\n    const groupCommType = () => {\r\n        const siteStats = websiteStats(groupContactLink.fields.value)\r\n        return (\r\n            <React.Fragment>\r\n                <a className={PFP.GCLType} href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className={PFP.GCLImage} src={'/svg/websites/internet.svg'} alt={siteStats.title} /></a>\r\n                <input className={PFP.PFSearchInputNormal} id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    const signInWarning = props.token ? null : (\r\n        <h3 className=\"warning-container\">must be signed in to add post</h3>\r\n    )\r\n    const onSuggestionClicked = (skill) => {\r\n        const skillToEnter = `${skill} `\r\n        setSkillName(skillToEnter)\r\n    }\r\n    return (\r\n        <div className=\"post-form0-container\">\r\n            <div className=\"navbar-height\" />\r\n            {signInWarning}\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                <div className={PFP.postForm0Form}>\r\n                    <h1 className=\"ppFormTitle\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\r\n                    <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\r\n                    <input className={PFP.PFSearchInput} id=\"PFTitle\" {...title.fields} />\r\n                    <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\r\n                        <ul style={{margin: 0}}>\r\n                            <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <textarea className={PFP.PFSearchInput} id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\r\n                    <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\r\n                        <ul style={{margin: 0}}>\r\n                            <li>used sparingly to decorate the post</li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className={PFP.PFDisplayColor} style={{backgroundColor: pallette.color}} >\r\n                        <div className={PFP.PFDisplayPart} style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\r\n                        <div className={PFP.PFDisplayPart} style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\r\n                    </div>\r\n                    <div className={PFP.PFInputColors}>\r\n                        {colorsHTML}\r\n                    </div>\r\n                    <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\r\n                    </InputHeader>\r\n                    <div>\r\n                        <div className={PFP.PFSkillFields}>\r\n                            <input className={PFP.PFSearchInput} placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\r\n                            <input className={PFP.PFSearchInput} placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\r\n                            <div className={PFP.PFSkillSuggContainer}>\r\n                                <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\r\n                            </div>\r\n                        </div>\r\n                        <h4 onClick={() => addSkills()} className={`${PFP.PFFieldSubmit} standard-hover`}>add skill</h4>               \r\n                    </div>\r\n                    {skillsHTML().map(s => s)}\r\n                    <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\r\n                    </InputHeader>\r\n                    {skillContribution()}\r\n                    <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\r\n                        <ul style={{margin: 0}}>\r\n                            <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className={PFP.GCLInput}>\r\n                        {groupCommType()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\r\n                    <input className={PFP.PFSearchInput} type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addImage()} className={`${PFP.PFFieldSubmit} standard-hover`}>add image</h4>\r\n                    <div className={PFP.PFImagesContainer}>\r\n                        {imagesHTML()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\r\n                    <input className={PFP.PFSearchInput} type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addRL()} className={`${PFP.PFFieldSubmit} standard-hover`}>add link</h4>\r\n                    {referenceLinksHTML()}\r\n                </div>\r\n                <div>\r\n                    <img src=\"/svg/websites/whatsapp.svg\" />\r\n                </div>\r\n                <button type=\"submit\" className={`${PFP.PFSubmit} standard-hover`}><h2 style={{margin: '5px'}}>create post</h2></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n// PostFormPage = withRouter(PostFormPage)\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         skillProposition: state.skillProposition,\r\n//         currentUser: state.currentUser,\r\n//         token: state.token\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { setAlert, resetAlert }\r\n// )(PostFormPage)\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        alert: state.alert\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAlert: bindActionCreators(setAlert, dispatch),\r\n        resetAlert: bindActionCreators(resetAlert, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PostFormPage)"]},"metadata":{},"sourceType":"module"}