{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\postformpage.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_POST } from '../src/schemas/mutations';\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../src/functions/functions';\nimport pfpStyle from '../styles/pages/postForm.module.css';\nimport { withRouter } from 'react-router-dom'; // import InputHeader from '../src/components/text-field/InputHeader'\n\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif'; // import SkillSugg from '../src/components/text-field/SkillSugg'\n\nimport { bindActionCreators } from 'redux';\nimport { FIND_USER, ALL_POSTS } from '../src/schemas/queries';\nimport { apolloClient } from '../lib/apollo';\n\nlet PostFormPage = props => {\n  // const title = useField('text')\n  // const description = useField('text')\n  // const [color, setColor] = useState(null)\n  // const groupContactLink = useField('url')\n  // const [skillName, setSkillName] = useState('')\n  // const [skillNameList, setSkillNameList] = useState([])\n  // const [skillCapacity, setSkillCapacity] = useState('')\n  // const [skillCapList, setSkillCapList] = useState([])\n  // const [imageLink, setImageLink] = useState('')\n  // const [imageLinkList, setImageLinkList] = useState([])\n  // const [referenceLink, setReferenceLink] = useState('')\n  // const [referenceLinkList, setReferenceLinkList] = useState([])\n  // const [skillProposition, setSkillProposition] = useState(null)\n  // const [skillSelected, setSkillSelected] = useState(null)\n  // // This is a test for form validation\n  // const handleError = (e) => {\n  //     const message = e.message\n  //     if (message.includes('Response not successful')) {\n  //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //         return null \n  //     }\n  //     if (message.includes('Path `title` (')) {\n  //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('dup key: { title')) {\n  //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate description')) {\n  //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('minimum allowed length')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('Path `description` (')) {\n  //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (message.includes('duplicate contactLink')) {\n  //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  // }\n  // const [createPost] = useMutation( CREATE_POST, {\n  //     onError: handleError\n  // })\n  // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\n  // const handleSubmit = async (e) => {\n  //     e.preventDefault()\n  //     if (!props.token) {\n  //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\n  //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     let cleanedTitle = []\n  //     for (const word of title.fields.value.split(' ')) {\n  //         if (word.length) cleanedTitle.push(word)\n  //     }\n  //     const postCreated = await createPost({\n  //         variables: {\n  //             title: cleanedTitle.join(' '),\n  //             user: props.currentUser._id,\n  //             skillNames: skillNameList,\n  //             skillCapacities: skillCapList,\n  //             skillFills: skillProposition,\n  //             description: description.fields.value,\n  //             contactLink: groupContactLink.fields.value,\n  //             color: color,\n  //             imageLinks: imageLinkList,\n  //             referenceLinks: referenceLinkList\n  //         }\n  //     })\n  //     if (postCreated) {\n  //         title.reset()\n  //         description.reset()\n  //         groupContactLink.reset()\n  //         setSkillName('')\n  //         setSkillNameList([])\n  //         setSkillCapacity('')\n  //         setSkillCapList([])\n  //         setImageLink('')\n  //         setImageLinkList([])\n  //         setReferenceLink('')\n  //         setReferenceLinkList([])\n  //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\n  //     }\n  // }\n  // const colors = [\n  //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\n  //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \n  //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \n  //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\n  // ]\n  // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className={PFP.color-ins} style={{backgroundColor: c}} key={`PFC${c}`} />)\n  // const addSkills = () => {\n  //     let cleanedSkill = []\n  //     for (const word of skillName.split(' ')) {\n  //         if (word.length) cleanedSkill.push(word)\n  //     }\n  //     setSkillName(cleanedSkill.join(' '))\n  //     if (Number(skillCapacity)){\n  //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\n  //         setSkillName('')\n  //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\n  //         setSkillCapacity('')\n  //         setSkillProposition(null)\n  //         setSkillSelected(null)\n  //     }\n  // }\n  // const removeSkill = (ind) => {\n  //     const newSkillNameList = []\n  //     for (const i in skillNameList) {\n  //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\n  //     }\n  //     setSkillNameList(newSkillNameList)\n  //     const newSkillCapList = []\n  //     for (const i in skillCapList) {\n  //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\n  //     }\n  //     setSkillCapList(newSkillCapList)\n  //     const newSkillProposition = []\n  //     for (const i in props.skillProposition) {\n  //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\n  //     }\n  // }\n  // const removeImage = (ind) => {\n  //     const newImageLinkList = []\n  //     for (const i in imageLinkList) {\n  //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\n  //     }\n  //     setImageLinkList(newImageLinkList)\n  // }\n  // const addImage = () => {\n  //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\n  //         setImageLinkList(imageLinkList.concat(imageLink))\n  //         setImageLink('')\n  //     }\n  // }\n  // const removeRL = (ind) => {\n  //     const newReferenceLinkList = []\n  //     for (const i in referenceLinkList) {\n  //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\n  //     }\n  //     setReferenceLinkList(newReferenceLinkList)\n  // }\n  // const addRL = () => {\n  //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n  //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\n  //         setReferenceLink('')\n  //     }\n  // }\n  // const skillsHTML = () => {\n  //     let skillsHTML = []\n  //     for (const ind in skillNameList) {\n  //         skillsHTML.push(\n  //             <div className={PFP.PF-skill-wrapper} key={`PFS${skillNameList[ind]}`}>\n  //                 <div className={PFP.PF-skill-container}>\n  //                     <div className={PFP.PF-skill-name}>{skillNameList[ind]}</div>\n  //                     <div className={PFP.PF-skill-cap}>{skillCapList[ind]}</div>\n  //                 </div>\n  //                 <div className={PFP.PF-skill-remove} onClick={() => removeSkill(ind)}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return skillsHTML\n  // }\n  // const skillContribution = () => {\n  //     if (!skillNameList.length) {\n  //         return <h4 className={PFP.PF-input-title} style={{opacity: 0.7}}>must add skill first</h4>\n  //     }\n  //     const handleSkillSelect = (i) => {\n  //         const skillArray = Array(skillNameList.length).fill(0)\n  //         skillArray[i] = 1\n  //         setSkillProposition(skillArray)\n  //         setSkillSelected(skillNameList[i])\n  //     }\n  //     const skillMap = []\n  //     for (const i in skillNameList) {\n  //         const skillClass = skillSelected === skillNameList[i] ?\n  //             'PFP.skill-selected' : 'PFP.skill-normal'\n  //         skillMap.push(\n  //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\n  //         )\n  //     }\n  //     return (\n  //         <div className={PFP.skills-container}>\n  //             {skillMap}\n  //         </div>\n  //     )\n  // }\n  // const imagesHTML = () => {\n  //     const allImages = []\n  //     for (const ind in imageLinkList) {\n  //         allImages.push(\n  //             <div className={PFP.PF-image-display-container} key={`IL${ind}`}>\n  //                 <img className={PFP.PF-image-display} src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\n  //                 <div onClick={() => removeImage(ind)} className={PFP.PF-skill-remove} style={{height: '75px', lineHeight: '70px'}} >x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allImages.map(img => img)\n  // }\n  // const referenceLinksHTML = () => {\n  //     const allRL = []\n  //     for (const ind in referenceLinkList) {\n  //         allRL.push(\n  //             <div className={PFP.PF-link-container} key={`RL${ind}`}>\n  //                 <a href={referenceLinkList[ind]} className={PFP.PF-reference-link neutralize-link}>{referenceLinkList[ind].split('/')[2]}</a>\n  //                 <div onClick={() => removeRL(ind)} className={PFP.PF-skill-remove} style={{lineHeight: '30px'}}>x</div>\n  //             </div>\n  //         )\n  //     }\n  //     return allRL.map(rl => rl)\n  // }\n  // const groupCommType = () => {\n  //     const siteStats = websiteStats(groupContactLink.fields.value)\n  //     return (\n  //         <React.Fragment>\n  //             <a className={PFP.GCL-type} href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\n  //             <input className={PFP.PF-search-input-normal} id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\n  //         </React.Fragment>\n  //     )\n  // }\n  // const signInWarning = props.token ? null : (\n  //     <h3 className=\"warning-container\">must be signed in to add post</h3>\n  // )\n  // const onSuggestionClicked = (skill) => {\n  //     const skillToEnter = `${skill} `\n  //     setSkillName(skillToEnter)\n  // }\n  return __jsx(\"div\", {\n    className: \"post-form0-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: pfpStyle.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"PostFormPage\"));\n}; // PostFormPage = withRouter(PostFormPage)\n// const mapStateToProps = (state) => {\n// \treturn {\n//         skillProposition: state.skillProposition,\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { setAlert, resetAlert }\n// )(PostFormPage)\n\n\n_c = PostFormPage;\n\nconst mapStateToProps = state => {\n  return {\n    alert: state.alert\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostFormPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostFormPage\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/postformpage.js"],"names":["React","useState","connect","useMutation","CREATE_POST","useField","triggerAlert","palletteGenerator","websiteStats","pfpStyle","withRouter","setAlert","resetAlert","bindActionCreators","FIND_USER","ALL_POSTS","apolloClient","PostFormPage","props","test","mapStateToProps","state","alert","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,iBAAjC,EAAoDC,YAApD,QAAwE,4BAAxE;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,8BAArC,C,CACA;;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,wBAAnC;AACA,SAAQC,YAAR,QAA2B,eAA3B;;AAEA,IAAIC,YAAY,GAAIC,KAAD,IAAW;AAC1B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAET,QAAQ,CAACU,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAuEH,CAjUD,C,CAmUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA/UIF,Y;;AAiVJ,MAAMG,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAC,IAAAA,KAAK,EAAED,KAAK,CAACC;AADb,GAAP;AAGA,CAJD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHb,IAAAA,QAAQ,EAAEE,kBAAkB,CAACF,QAAD,EAAWa,QAAX,CADzB;AAEHZ,IAAAA,UAAU,EAAEC,kBAAkB,CAACD,UAAD,EAAaY,QAAb;AAF3B,GAAP;AAIH,CALD;;AAOA,eAAetB,OAAO,CAClBkB,eADkB,EAElBG,kBAFkB,CAAP,CAGbN,YAHa,CAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { CREATE_POST } from '../src/schemas/mutations'\r\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../src/functions/functions'\r\nimport pfpStyle from '../styles/pages/postForm.module.css'\r\nimport { withRouter } from 'react-router-dom'\r\n// import InputHeader from '../src/components/text-field/InputHeader'\r\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif'\r\n// import SkillSugg from '../src/components/text-field/SkillSugg'\r\nimport {bindActionCreators} from 'redux'\r\nimport {FIND_USER, ALL_POSTS} from '../src/schemas/queries'\r\nimport {apolloClient} from '../lib/apollo'\r\n\r\nlet PostFormPage = (props) => {\r\n    // const title = useField('text')\r\n    // const description = useField('text')\r\n    // const [color, setColor] = useState(null)\r\n    // const groupContactLink = useField('url')\r\n\r\n    // const [skillName, setSkillName] = useState('')\r\n    // const [skillNameList, setSkillNameList] = useState([])\r\n    // const [skillCapacity, setSkillCapacity] = useState('')\r\n    // const [skillCapList, setSkillCapList] = useState([])\r\n    // const [imageLink, setImageLink] = useState('')\r\n    // const [imageLinkList, setImageLinkList] = useState([])\r\n    // const [referenceLink, setReferenceLink] = useState('')\r\n    // const [referenceLinkList, setReferenceLinkList] = useState([])\r\n\r\n    // const [skillProposition, setSkillProposition] = useState(null)\r\n    // const [skillSelected, setSkillSelected] = useState(null)\r\n    // // This is a test for form validation\r\n    // const handleError = (e) => {\r\n    //     const message = e.message\r\n    //     if (message.includes('Response not successful')) {\r\n    //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n    //         return null \r\n    //     }\r\n    //     if (message.includes('Path `title` (')) {\r\n    //         triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('dup key: { title')) {\r\n    //         triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('duplicate description')) {\r\n    //         triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('minimum allowed length')) {\r\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('Path `description` (')) {\r\n    //         triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (message.includes('duplicate contactLink')) {\r\n    //         triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    // }\r\n    // const [createPost] = useMutation( CREATE_POST, {\r\n    //     onError: handleError\r\n    // })\r\n    // const pallette = color ? palletteGenerator(color).colorPallette : {color: null, heigherColor: null}\r\n    // const handleSubmit = async (e) => {\r\n    //     e.preventDefault()\r\n    //     if (!props.token) {\r\n    //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     if (!skillNameList.length || !groupContactLink.fields.value.length) {\r\n    //         triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert)\r\n    //         return null\r\n    //     }\r\n    //     let cleanedTitle = []\r\n    //     for (const word of title.fields.value.split(' ')) {\r\n    //         if (word.length) cleanedTitle.push(word)\r\n    //     }\r\n    //     const postCreated = await createPost({\r\n    //         variables: {\r\n    //             title: cleanedTitle.join(' '),\r\n    //             user: props.currentUser._id,\r\n    //             skillNames: skillNameList,\r\n    //             skillCapacities: skillCapList,\r\n    //             skillFills: skillProposition,\r\n    //             description: description.fields.value,\r\n    //             contactLink: groupContactLink.fields.value,\r\n    //             color: color,\r\n    //             imageLinks: imageLinkList,\r\n    //             referenceLinks: referenceLinkList\r\n    //         }\r\n    //     })\r\n    //     if (postCreated) {\r\n    //         title.reset()\r\n    //         description.reset()\r\n    //         groupContactLink.reset()\r\n    //         setSkillName('')\r\n    //         setSkillNameList([])\r\n    //         setSkillCapacity('')\r\n    //         setSkillCapList([])\r\n    //         setImageLink('')\r\n    //         setImageLinkList([])\r\n    //         setReferenceLink('')\r\n    //         setReferenceLinkList([])\r\n    //         props.history.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`)\r\n    //     }\r\n    // }\r\n    // const colors = [\r\n    //     'rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)',\r\n    //     'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', \r\n    //     'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)',  \r\n    //     'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'\r\n    // ]\r\n    // const colorsHTML = colors.map(c => <div onClick={() => setColor(c)} className={PFP.color-ins} style={{backgroundColor: c}} key={`PFC${c}`} />)\r\n    // const addSkills = () => {\r\n    //     let cleanedSkill = []\r\n    //     for (const word of skillName.split(' ')) {\r\n    //         if (word.length) cleanedSkill.push(word)\r\n    //     }\r\n    //     setSkillName(cleanedSkill.join(' '))\r\n    //     if (Number(skillCapacity)){\r\n    //         setSkillNameList(skillNameList.concat(skillName.toLowerCase()))\r\n    //         setSkillName('')\r\n    //         setSkillCapList(skillCapList.concat(Number(skillCapacity)))\r\n    //         setSkillCapacity('')\r\n    //         setSkillProposition(null)\r\n    //         setSkillSelected(null)\r\n    //     }\r\n    // }\r\n    // const removeSkill = (ind) => {\r\n    //     const newSkillNameList = []\r\n    //     for (const i in skillNameList) {\r\n    //         if (i !== ind) { newSkillNameList.push(skillNameList[i]) }\r\n    //     }\r\n    //     setSkillNameList(newSkillNameList)\r\n    //     const newSkillCapList = []\r\n    //     for (const i in skillCapList) {\r\n    //         if (i !== ind) { newSkillCapList.push(skillCapList[i]) }\r\n    //     }\r\n    //     setSkillCapList(newSkillCapList)\r\n    //     const newSkillProposition = []\r\n    //     for (const i in props.skillProposition) {\r\n    //         if (i !== ind) { newSkillProposition.push(props.skillProposition[i]) }\r\n    //     }\r\n    // }\r\n    \r\n    // const removeImage = (ind) => {\r\n    //     const newImageLinkList = []\r\n    //     for (const i in imageLinkList) {\r\n    //         if (i !== ind) { newImageLinkList.push(imageLinkList[i]) }\r\n    //     }\r\n    //     setImageLinkList(newImageLinkList)\r\n    // }\r\n    \r\n    // const addImage = () => {\r\n    //     if (imageLink.includes('https://') || imageLink.includes('http://')) {\r\n    //         setImageLinkList(imageLinkList.concat(imageLink))\r\n    //         setImageLink('')\r\n    //     }\r\n    // }\r\n\r\n    // const removeRL = (ind) => {\r\n    //     const newReferenceLinkList = []\r\n    //     for (const i in referenceLinkList) {\r\n    //         if (i !== ind) { newReferenceLinkList.push(referenceLinkList[i]) }\r\n    //     }\r\n    //     setReferenceLinkList(newReferenceLinkList)\r\n    // }\r\n\r\n    // const addRL = () => {\r\n    //     if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\r\n    //         setReferenceLinkList(referenceLinkList.concat(referenceLink))\r\n    //         setReferenceLink('')\r\n    //     }\r\n    // }\r\n\r\n    // const skillsHTML = () => {\r\n    //     let skillsHTML = []\r\n    //     for (const ind in skillNameList) {\r\n    //         skillsHTML.push(\r\n    //             <div className={PFP.PF-skill-wrapper} key={`PFS${skillNameList[ind]}`}>\r\n    //                 <div className={PFP.PF-skill-container}>\r\n    //                     <div className={PFP.PF-skill-name}>{skillNameList[ind]}</div>\r\n    //                     <div className={PFP.PF-skill-cap}>{skillCapList[ind]}</div>\r\n    //                 </div>\r\n    //                 <div className={PFP.PF-skill-remove} onClick={() => removeSkill(ind)}>x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return skillsHTML\r\n    // }\r\n\r\n    // const skillContribution = () => {\r\n    //     if (!skillNameList.length) {\r\n    //         return <h4 className={PFP.PF-input-title} style={{opacity: 0.7}}>must add skill first</h4>\r\n    //     }\r\n\r\n    //     const handleSkillSelect = (i) => {\r\n    //         const skillArray = Array(skillNameList.length).fill(0)\r\n    //         skillArray[i] = 1\r\n    //         setSkillProposition(skillArray)\r\n    //         setSkillSelected(skillNameList[i])\r\n    //     }\r\n\r\n    //     const skillMap = []\r\n    //     for (const i in skillNameList) {\r\n    //         const skillClass = skillSelected === skillNameList[i] ?\r\n    //             'PFP.skill-selected' : 'PFP.skill-normal'\r\n    //         skillMap.push(\r\n    //             <h4 onClick={() => handleSkillSelect(i, skillNameList[i])} className={skillClass} key={`SKILL${i}`}>{skillNameList[i]}</h4>\r\n    //         )\r\n    //     }\r\n\r\n    //     return (\r\n    //         <div className={PFP.skills-container}>\r\n    //             {skillMap}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const imagesHTML = () => {\r\n    //     const allImages = []\r\n    //     for (const ind in imageLinkList) {\r\n    //         allImages.push(\r\n    //             <div className={PFP.PF-image-display-container} key={`IL${ind}`}>\r\n    //                 <img className={PFP.PF-image-display} src={imageLinkList[ind]} alt={`(${imageLinkList[ind]}) failed to load`} key={`IL${imageLinkList[ind]}`} />\r\n    //                 <div onClick={() => removeImage(ind)} className={PFP.PF-skill-remove} style={{height: '75px', lineHeight: '70px'}} >x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return allImages.map(img => img)\r\n    // }\r\n\r\n    // const referenceLinksHTML = () => {\r\n    //     const allRL = []\r\n    //     for (const ind in referenceLinkList) {\r\n    //         allRL.push(\r\n    //             <div className={PFP.PF-link-container} key={`RL${ind}`}>\r\n    //                 <a href={referenceLinkList[ind]} className={PFP.PF-reference-link neutralize-link}>{referenceLinkList[ind].split('/')[2]}</a>\r\n    //                 <div onClick={() => removeRL(ind)} className={PFP.PF-skill-remove} style={{lineHeight: '30px'}}>x</div>\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    //     return allRL.map(rl => rl)\r\n    // }\r\n    // const groupCommType = () => {\r\n    //     const siteStats = websiteStats(groupContactLink.fields.value)\r\n    //     return (\r\n    //         <React.Fragment>\r\n    //             <a className={PFP.GCL-type} href={groupContactLink.fields.value} title={siteStats.title} style={{backgroundColor: siteStats.color}}><img className=\"GCL-image\" src={siteStats.icon} alt={siteStats.title} /></a>\r\n    //             <input className={PFP.PF-search-input-normal} id=\"PF-GC-Link\" {...groupContactLink.fields} style={{marginBottom: 0, borderColor: siteStats.color}} />\r\n    //         </React.Fragment>\r\n    //     )\r\n    // }\r\n    // const signInWarning = props.token ? null : (\r\n    //     <h3 className=\"warning-container\">must be signed in to add post</h3>\r\n    // )\r\n    // const onSuggestionClicked = (skill) => {\r\n    //     const skillToEnter = `${skill} `\r\n    //     setSkillName(skillToEnter)\r\n    // }\r\n    return (\r\n        <div className=\"post-form0-container\">\r\n            <h1 className={pfpStyle.test}>PostFormPage</h1>\r\n            {/* <div className=\"navbar-height\" />\r\n            {signInWarning}\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                <div className={PFP.post-form0-form}>\r\n                    <h1 className=\"pp-form-title\" style={{textAlign: 'start', marginLeft: 0}}>create post</h1>\r\n                    <InputHeader info={false} title=\"title\" color=\"white\" inputFor=\"PF-title\" />\r\n                    <input className={PFP.PF-search-input} id=\"PF-title\" {...title.fields} />\r\n                    <InputHeader info={true} title=\"description\" color=\"white\" inputFor=\"PF-description\" >\r\n                        <ul style={{margin: 0}}>\r\n                            <li>any links starting with (https://) or (http://) get decorated like this <a href=\"https://www.unilous.com/post-form/\" className=\"p-link neutralize-link\">http://decorated-link.com</a></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <textarea className={PFP.PF-search-input} id=\"PF-description\" {...description.fields}  style={{height: '100px', width: '100%'}} />\r\n                    <InputHeader info={true} title=\"color\" color=\"white\" inputFor=\"\">\r\n                        <ul style={{margin: 0}}>\r\n                            <li>used sparingly to decorate the post</li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className={PFP.PF-display-color} style={{backgroundColor: pallette.color}} >\r\n                        <div className={PFP.PF-display-part} style={{backgroundColor: pallette.color, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>primary</h4></div>\r\n                        <div className={PFP.PF-display-part} style={{backgroundColor: pallette.higherColor, color: pallette.textColor}}><h4 style={{margin: 'auto'}}>secondary</h4></div>\r\n                    </div>\r\n                    <div className={PFP.PF-input-colors}>\r\n                        {colorsHTML}\r\n                    </div>\r\n                    <InputHeader info={true} title=\"skills\" color=\"white\" inputFor=\"PF-skillName\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skills needed to execute the project</p>\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>amount of people needed per skill</p>\r\n                    </InputHeader>\r\n                    <div>\r\n                        <div className={PFP.PF-skill-fields}>\r\n                            <input className={PFP.PF-search-input} placeholder=\"skill name\" id=\"PF-skillName\" value={skillName} onChange={(e) => setSkillName(e.target.value)} type=\"text\" style={{marginBottom: 0}} />\r\n                            <input className={PFP.PF-search-input} placeholder=\"amount of help\" value={skillCapacity} onChange={(e) => setSkillCapacity(e.target.value)} type=\"number\" style={{marginBottom: 0}} />\r\n                            <div className={PFP.PF-skill-sugg-container}>\r\n                                <SkillSugg query={skillName} onSuggestionClicked={onSuggestionClicked} style={{gridColumn: '1/2'}} />\r\n                            </div>\r\n                        </div>\r\n                        <h4 onClick={() => addSkills()} className={PFP.PF-field-submit standard-hover\">add skill</h4>               \r\n                    </div>\r\n                    {skillsHTML().map(s => s)}\r\n                    <InputHeader info={true} title=\"contribution\" color=\"white\" inputFor=\"\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>skill you contribute to the project</p>\r\n                    </InputHeader>\r\n                    {skillContribution()}\r\n                    <InputHeader info={true} title=\"group/contact link\" color=\"white\" inputFor=\"PF-GC-Link\">\r\n                        <p style={{margin: 0, marginBottom: '5px'}}>link shown to users who have been accepted to join the project</p>\r\n                        <ul style={{margin: 0}}>\r\n                            <li>group links recommended: <strong>Slack</strong>, <strong>Trello</strong>, <strong>Discord</strong>, or <strong>WhatsApp</strong></li>\r\n                        </ul>\r\n                    </InputHeader>\r\n                    <div className={PFP.GCL-input}>\r\n                        {groupCommType()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"images\" color=\"white\" inputFor=\"PF-imageLinks\" />\r\n                    <input className={PFP.PF-search-input} type=\"url\" placeholder=\"image link\" id=\"PF-imageLinks\" value={imageLink} onChange={(e) => setImageLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addImage()} className={PFP.PF-field-submit standard-hover}>add image</h4>\r\n                    <div className={PFP.PF-images-container}>\r\n                        {imagesHTML()}\r\n                    </div>\r\n                    <InputHeader info={false} title=\"links\" color=\"white\" inputFor=\"PF-referenceLinks\" />\r\n                    <input className={PFP.PF-search-input} type=\"url\" id=\"PF-referenceLinks\" value={referenceLink} onChange={(e) => setReferenceLink(e.target.value)} style={{marginBottom: 0}} />\r\n                    <h4 onClick={() => addRL()} className={PFP.PF-field-submit standard-hover}>add link</h4>\r\n                    {referenceLinksHTML()}\r\n                </div>\r\n                <button type=\"submit\" className={PFP.PF-submit standard-hover}><h2 style={{margin: '5px'}}>create post</h2></button>\r\n            </form> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// PostFormPage = withRouter(PostFormPage)\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         skillProposition: state.skillProposition,\r\n//         currentUser: state.currentUser,\r\n//         token: state.token\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { setAlert, resetAlert }\r\n// )(PostFormPage)\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        alert: state.alert\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAlert: bindActionCreators(setAlert, dispatch),\r\n        resetAlert: bindActionCreators(resetAlert, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PostFormPage)"]},"metadata":{},"sourceType":"module"}