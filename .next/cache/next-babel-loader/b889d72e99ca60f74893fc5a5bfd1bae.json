{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { withApollo } from \"next-apollo\";\nimport ApolloClient, { HttpLink, InMemoryCache } from \"apollo-boost\";\nconst httpLink = createHttpLink({\n  uri: 'https://projectu-back-end-2020.herokuapp.com/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? `berySecret ${token}` : null\n    })\n  };\n});\nconst apolloClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n}); // const apolloClient = new ApolloClient({\n//   uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\n//   cache: new InMemoryCache(),\n//   ssrMode: true\n// })\n\nexport default withApollo(apolloClient);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/lib/apollo.js"],"names":["withApollo","ApolloClient","HttpLink","InMemoryCache","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","apolloClient","link","concat","cache"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,YAAP,IAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,cAAtD;AAEA,MAAMC,QAAQ,GAAGC,cAAc,CAAC;AAC9BC,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGC,UAAU,CAAC,CAACC,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,SAAO;AACHH,IAAAA,OAAO,kCACAA,OADA;AAEHI,MAAAA,aAAa,EAAEH,KAAK,GAAI,cAAaA,KAAM,EAAvB,GAA2B;AAF5C;AADJ,GAAP;AAMD,CAR0B,CAA3B;AAUA,MAAMI,YAAY,GAAG,IAAId,YAAJ,CAAiB;AACpCe,EAAAA,IAAI,EAAET,QAAQ,CAACU,MAAT,CAAgBb,QAAhB,CAD8B;AAEpCc,EAAAA,KAAK,EAAE,IAAIf,aAAJ;AAF6B,CAAjB,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,UAAU,CAACe,YAAD,CAAzB","sourcesContent":["import { withApollo } from \"next-apollo\"\r\nimport ApolloClient, { HttpLink, InMemoryCache } from \"apollo-boost\"\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\r\n})\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('token')\r\n  return {\r\n      headers: {\r\n          ...headers,\r\n          authorization: token ? `berySecret ${token}` : null,\r\n      }\r\n  }\r\n})\r\n\r\nconst apolloClient = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n})\r\n\r\n// const apolloClient = new ApolloClient({\r\n//   uri: 'https://projectu-back-end-2020.herokuapp.com/graphql',\r\n//   cache: new InMemoryCache(),\r\n//   ssrMode: true\r\n// })\r\n\r\nexport default withApollo(apolloClient)\r\n"]},"metadata":{},"sourceType":"module"}