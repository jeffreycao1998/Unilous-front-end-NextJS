{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport token from './reducers/token';\nimport currentUser from './reducers/currentUser';\nimport posts from './reducers/posts';\nimport alertNotif from './reducers/alertNotif';\nimport stretchLayout from './reducers/stretchLayout';\nimport eventSearch from './reducers/eventSearch';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const initStore = () => {\n  return createStore(combineReducers({\n    count\n  }), bindMiddleware([thunkMiddleware]));\n};","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/redux/store.js"],"names":["createStore","applyMiddleware","combineReducers","thunkMiddleware","token","currentUser","posts","alertNotif","stretchLayout","eventSearch","bindMiddleware","middleware","composeWithDevTools","require","initStore","count"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,cAAc,GAAGC,UAAU,IAAI;AACnC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACX,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOV,eAAe,CAAC,GAAGU,UAAJ,CAAtB;AACD,CAND;;AAQA,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC7B,SAAOd,WAAW,CAChBE,eAAe,CAAC;AACda,IAAAA;AADc,GAAD,CADC,EAIhBL,cAAc,CAAC,CAACP,eAAD,CAAD,CAJE,CAAlB;AAMD,CAPM","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport token from './reducers/token'\r\nimport currentUser from './reducers/currentUser'\r\nimport posts from './reducers/posts'\r\nimport alertNotif from './reducers/alertNotif'\r\nimport stretchLayout from './reducers/stretchLayout'\r\nimport eventSearch from './reducers/eventSearch'\r\n\r\nconst bindMiddleware = middleware => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension')\r\n    return composeWithDevTools(applyMiddleware(...middleware))\r\n  }\r\n  return applyMiddleware(...middleware)\r\n}\r\n\r\nexport const initStore = () => {\r\n  return createStore(\r\n    combineReducers({\r\n      count,\r\n    }),\r\n    bindMiddleware([thunkMiddleware])\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}