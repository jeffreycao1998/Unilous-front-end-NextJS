{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\results.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport resStyle from '../styles/pages/results.module.css'; // import Post from '../src/components/post/Post'\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { SEARCH_POSTS } from '../src/schemas/queries'; // import { addPosts } from '../src/reducers/posts'\n\nimport { Link } from 'react-router-dom'; // import Loading from '../src/components/Loading'\n\nimport { palletteGenerator } from '../src/functions/functions'; // import { toggleStretchLayout } from '../src/reducers/stretchLayout'\n// import { setEventSearch } from '../src/reducers/eventSearch'\n// import covidIconB from '../src/static/svg/events/virusB.svg'\n// import covidIconW from '../src/static/svg/events/virusW.svg'\n// import covidIconC from '../src/static/svg/events/virusC.svg'\n// import usaIconB from '../src/static/svg/events/usaB.svg'\n// import usaIconW from '../src/static/svg/events/usaW.svg'\n// import usaIconC from '../src/static/svg/events/usaC.svg'\n\nimport { bindActionCreators } from 'redux';\n\nconst Results = props => {\n  // const currentIds = props.posts ? props.posts.map(p => p._id) : []\n  // const [scrollAtBottom, setScrollAtBottom] = useState(false)\n  // const decodedSearch = decodeURIComponent(props.query)\n  // const SPQuery = useQuery(SEARCH_POSTS, {\n  //     variables: {\n  //         filterString: decodedSearch,\n  //         postIds: currentIds,\n  //         eventQuery: props.eventSearch,\n  //     }\n  // })\n  // const moreResults = () => {\n  //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\n  //         return false\n  //     }\n  //     return true\n  // }\n  // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //     setScrollAtBottom(true)\n  // }\n  // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //     setScrollAtBottom(false)\n  // }\n  // const triggerWhenScroll = () => {\n  //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //         setScrollAtBottom(true)\n  //     }\n  //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //         setScrollAtBottom(false)\n  //     }\n  // }\n  // window.addEventListener('scroll', triggerWhenScroll, false)\n  // const postChangeConditions = (query, reducer) => {\n  //     if (!scrollAtBottom) return false\n  //     if (!query) return false\n  //     if (!query.searchPosts) return false\n  //     if (!reducer) {\n  //         return true\n  //     }\n  //     const queryTitles = query.searchPosts.map(i => i.title)\n  //     const reducerTitles = reducer.map(i => i.title)\n  //     for (const title of queryTitles) {\n  //         if (!reducerTitles.includes(title)) {\n  //             return true\n  //         }\n  //     }\n  //     return false\n  // }\n  // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\n  //     SPQuery.data.searchPosts : null\n  // useEffect(() => {\n  //     if (postsSearched && !props.posts) {\n  //         props.addPosts(SPQuery.data.searchPosts)\n  //         setScrollAtBottom(false)\n  //     }\n  //     if (postsSearched && props.posts) {\n  //         if (postsSearched.length > 0) {\n  //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\n  //                 props.addPosts(SPQuery.data.searchPosts)\n  //                 setScrollAtBottom(false)\n  //             }\n  //         }\n  //     }\n  // }, [SPQuery, props.addPosts, props, postsSearched])\n  // if (!props.posts) {\n  //     return (\n  //         <div>\n  //             <div style={{height: '5vh'}}/>\n  //             <Loading />\n  //         </div>\n  //     )\n  // }\n  // const eventQuery = props.eventSearch\n  // const eventKeys = () => {\n  //     if (eventQuery === 'COVID-19') {\n  //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\n  //     }\n  //     if (eventQuery === '2020 Election') {\n  //         return ['election', 'democrat', 'republican', 'vote']\n  //     }\n  //     return null\n  // }\n  // const postToShow = (post, eventKeys) => {\n  //     if (eventKeys) {\n  //         for (const keyWord of eventKeys) {\n  //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\n  //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //             }\n  //         }\n  //         return false\n  //     }\n  //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //     for (const skill of post.skillNames) {\n  //         if (decodedSearch.includes(skill)) return true\n  //     }\n  //     return false\n  // }\n  // let postsToShow = props.posts\n  // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\n  // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\n  // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\n  // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\n  // const eventsList = [\n  //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: '/svg/events/virusW.svg', iconC: '/svg/events/virusC.svg',\n  //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: '/svg/events/usaW.svg', iconC: '/svg/events/usaC.svg' \n  // ]\n  // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \n  //     <div className={resStyle.event-selected} onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconW} className={resStyle.event-image} alt={e.name} />\n  //         <h3 className={resStyle.event-text}>{e.name}</h3>\n  //     </div>\n  //     :\n  //     <div className={resStyle.event} onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconC} className={resStyle.vent-image} alt={e.name} />\n  //         <h3 className={resStyle.event-text}>{e.name}</h3>\n  //     </div>\n  // )\n  // const eventsContainerClass = props.eventSearch ? {resStyle.EC-active} : null\n  // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\n  return __jsx(\"div\", {\n    className: \"home-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: resStyle.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Results\"));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         posts: state.posts,\n//         search: state.search,\n//         stretchLayout: state.stretchLayout,\n//         eventSearch: state.eventSearch,\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { addPosts, toggleStretchLayout, setEventSearch }\n// )(Results)\n\n\n_c = Results;\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts,\n    stretchLayout: state.stretchLayout,\n    eventSearch: state.eventSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPosts: bindActionCreators(addPosts, dispatch),\n    toggleStretchLayout: bindActionCreators(toggleStretchLayout, dispatch),\n    setEventSearch: bindActionCreators(setEventSearch, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/results.js"],"names":["React","useState","useEffect","connect","resStyle","useQuery","SEARCH_POSTS","Link","palletteGenerator","bindActionCreators","Results","props","test","mapStateToProps","state","posts","stretchLayout","eventSearch","mapDispatchToProps","dispatch","addPosts","toggleStretchLayout","setEventSearch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,oCAArB,C,CACA;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,wBAA7B,C,CACA;;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CACA;;AACA,SAASC,iBAAT,QAAkC,4BAAlC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAQC,kBAAR,QAAiC,OAAjC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvcAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAI,IAAA,SAAS,EAAEP,QAAQ,CAACQ,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CADJ;AAgCH,CA5JD,C,CA8JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzKMF,O;;AA2KN,MAAMG,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADb;AAEAC,IAAAA,aAAa,EAAEF,KAAK,CAACE,aAFrB;AAGAC,IAAAA,WAAW,EAAEH,KAAK,CAACG;AAHnB,GAAP;AAKA,CAND;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHC,IAAAA,QAAQ,EAAEX,kBAAkB,CAACW,QAAD,EAAWD,QAAX,CADzB;AAEHE,IAAAA,mBAAmB,EAAEZ,kBAAkB,CAACY,mBAAD,EAAsBF,QAAtB,CAFpC;AAGHG,IAAAA,cAAc,EAAEb,kBAAkB,CAACa,cAAD,EAAiBH,QAAjB;AAH/B,GAAP;AAKH,CAND;;AAQA,eAAehB,OAAO,CAClBU,eADkB,EAElBK,kBAFkB,CAAP,CAGbR,OAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport resStyle from '../styles/pages/results.module.css'\r\n// import Post from '../src/components/post/Post'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { SEARCH_POSTS } from '../src/schemas/queries'\r\n// import { addPosts } from '../src/reducers/posts'\r\nimport { Link } from 'react-router-dom'\r\n// import Loading from '../src/components/Loading'\r\nimport { palletteGenerator } from '../src/functions/functions'\r\n// import { toggleStretchLayout } from '../src/reducers/stretchLayout'\r\n// import { setEventSearch } from '../src/reducers/eventSearch'\r\n// import covidIconB from '../src/static/svg/events/virusB.svg'\r\n// import covidIconW from '../src/static/svg/events/virusW.svg'\r\n// import covidIconC from '../src/static/svg/events/virusC.svg'\r\n// import usaIconB from '../src/static/svg/events/usaB.svg'\r\n// import usaIconW from '../src/static/svg/events/usaW.svg'\r\n// import usaIconC from '../src/static/svg/events/usaC.svg'\r\nimport {bindActionCreators} from 'redux'\r\n\r\nconst Results = (props) => {\r\n    // const currentIds = props.posts ? props.posts.map(p => p._id) : []\r\n    // const [scrollAtBottom, setScrollAtBottom] = useState(false)\r\n    // const decodedSearch = decodeURIComponent(props.query)\r\n    // const SPQuery = useQuery(SEARCH_POSTS, {\r\n    //     variables: {\r\n    //         filterString: decodedSearch,\r\n    //         postIds: currentIds,\r\n    //         eventQuery: props.eventSearch,\r\n    //     }\r\n    // })\r\n    // const moreResults = () => {\r\n    //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\r\n    //         return false\r\n    //     }\r\n    //     return true\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //     setScrollAtBottom(true)\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //     setScrollAtBottom(false)\r\n    // }\r\n    // const triggerWhenScroll = () => {\r\n    //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //         setScrollAtBottom(true)\r\n    //     }\r\n    //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    // }\r\n    // window.addEventListener('scroll', triggerWhenScroll, false)\r\n\r\n    // const postChangeConditions = (query, reducer) => {\r\n    //     if (!scrollAtBottom) return false\r\n    //     if (!query) return false\r\n    //     if (!query.searchPosts) return false\r\n    //     if (!reducer) {\r\n    //         return true\r\n    //     }\r\n    //     const queryTitles = query.searchPosts.map(i => i.title)\r\n    //     const reducerTitles = reducer.map(i => i.title)\r\n    //     for (const title of queryTitles) {\r\n    //         if (!reducerTitles.includes(title)) {\r\n    //             return true\r\n    //         }\r\n    //     }\r\n    //     return false\r\n    // }\r\n    // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\r\n    //     SPQuery.data.searchPosts : null\r\n    // useEffect(() => {\r\n    //     if (postsSearched && !props.posts) {\r\n    //         props.addPosts(SPQuery.data.searchPosts)\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    //     if (postsSearched && props.posts) {\r\n    //         if (postsSearched.length > 0) {\r\n    //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\r\n    //                 props.addPosts(SPQuery.data.searchPosts)\r\n    //                 setScrollAtBottom(false)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [SPQuery, props.addPosts, props, postsSearched])\r\n    // if (!props.posts) {\r\n    //     return (\r\n    //         <div>\r\n    //             <div style={{height: '5vh'}}/>\r\n    //             <Loading />\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const eventQuery = props.eventSearch\r\n    // const eventKeys = () => {\r\n    //     if (eventQuery === 'COVID-19') {\r\n    //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\r\n    //     }\r\n    //     if (eventQuery === '2020 Election') {\r\n    //         return ['election', 'democrat', 'republican', 'vote']\r\n    //     }\r\n    //     return null\r\n    // }\r\n    // const postToShow = (post, eventKeys) => {\r\n    //     if (eventKeys) {\r\n    //         for (const keyWord of eventKeys) {\r\n    //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\r\n    //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //             }\r\n    //         }\r\n    //         return false\r\n    //     }\r\n    //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //     for (const skill of post.skillNames) {\r\n    //         if (decodedSearch.includes(skill)) return true\r\n    //     }\r\n\r\n    //     return false\r\n    // }\r\n    // let postsToShow = props.posts\r\n    // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\r\n    // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\r\n    // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\r\n    // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\r\n    \r\n    // const eventsList = [\r\n    //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: '/svg/events/virusW.svg', iconC: '/svg/events/virusC.svg',\r\n    //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: '/svg/events/usaW.svg', iconC: '/svg/events/usaC.svg' \r\n    // ]\r\n    // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \r\n    //     <div className={resStyle.event-selected} onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconW} className={resStyle.event-image} alt={e.name} />\r\n    //         <h3 className={resStyle.event-text}>{e.name}</h3>\r\n    //     </div>\r\n    //     :\r\n    //     <div className={resStyle.event} onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconC} className={resStyle.vent-image} alt={e.name} />\r\n    //         <h3 className={resStyle.event-text}>{e.name}</h3>\r\n    //     </div>\r\n    // )\r\n    \r\n    // const eventsContainerClass = props.eventSearch ? {resStyle.EC-active} : null\r\n    // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\r\n    return (\r\n        <div className=\"home-wrapper\">\r\n            <h1 className={resStyle.test}>Results</h1>\r\n            {/* <div className={resStyle.results-container}>\r\n                <Link to=\"/post-form/\" className={`${resStyle.form-container-expand} standard-hover neutralize-link`} title={props.setTitle}>\r\n                    <img className={resStyle.form-expand-icon} src={pallette.plusIcon} alt=\"team up\" />\r\n                </Link>\r\n                <div className=\"navbar-height\"/>\r\n                <h2 className={resStyle.secondary-title}>events</h2>\r\n                <div className={`${resStyle.events-container} ${eventsContainerClass}`}>\r\n                    {eventsHTML}\r\n                </div>\r\n                <div onClick={() => props.toggleStretchLayout(!props.stretchLayout)} className={resStyle.layout-wrapper}>\r\n                    <div className={resStyle.layout-container}>\r\n                        <div className={`layout-button ${layoutBtnClass}`} >\r\n                            <div className={resStyle.layout-box}/>\r\n                            <div className={resStyle.layout-box}/>\r\n                            <div className={resStyle.layout-box}/>\r\n                            <div className={resStyle.layout-box}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div />\r\n                <div className={`results-content ${layoutClass}`}>\r\n                    {postsToShow}\r\n                </div>\r\n                <div style={{position: 'relative', height: '400px'}}>\r\n                    {showLoading}\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         posts: state.posts,\r\n//         search: state.search,\r\n//         stretchLayout: state.stretchLayout,\r\n//         eventSearch: state.eventSearch,\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { addPosts, toggleStretchLayout, setEventSearch }\r\n// )(Results)\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        posts: state.posts,\r\n        stretchLayout: state.stretchLayout,\r\n        eventSearch: state.eventSearch,\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPosts: bindActionCreators(addPosts, dispatch),\r\n        toggleStretchLayout: bindActionCreators(toggleStretchLayout, dispatch),\r\n        setEventSearch: bindActionCreators(setEventSearch, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Results)"]},"metadata":{},"sourceType":"module"}