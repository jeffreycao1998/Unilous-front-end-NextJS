{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\components\\\\user\\\\utilities\\\\UserNotifList.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { LIST_OF_NOTIFICATIONS } from '../../../src/schemas/queries';\nimport { setCurrentUserNotifications } from '../../../redux/reducers/currentUser';\nimport Notif from './Notif';\nimport Loading from '../../Loading';\nimport apollo, { apolloClient } from '../../../lib/apollo';\nimport { bindActionCreators } from 'redux';\n\nconst UserNotifList = props => {\n  const notifsListQuery = useQuery(LIST_OF_NOTIFICATIONS, {\n    variables: {\n      notifications: props.currentUser.notifications.map(n => n._id)\n    }\n  }); // const notifsListQuery = apolloClient.query({\n  //     query: LIST_OF_NOTIFICATIONS,\n  //     variables: {notifications: props.currentUser.notifications.map(n => n._id)}\n  // }).catch(err => console.log(err))\n\n  if (gimmeQuery()) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, notifsListQuery.data.listOfNotifications.map(n => __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 64\n      }\n    }, n.userFrom.username)));\n  }\n\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }\n  }, \"loading\"); // const [sentFilter, setSentFilter] = useState('to you')\n  // const [showSFDD, setShowSFDD] = useState(false)\n  // const [statusFilter, setStatusFilter] = useState('pending')\n  // const [showStatusDD, setShowStatusDD] = useState(false)\n  // const notifsListConditions = (query, reducer) => {\n  //     // if (!query) { return null }\n  //     // if (!query.listOfNotifications) { return null }\n  //     // if (reducer.length === 0) { return null }\n  //     // if (reducer[0].userTo) {\n  //     //     if (query.listOfNotifications[0]._id === reducer[0]._id ) { return null }\n  //     // }\n  //     return query\n  // }\n  // const notifsList = notifsListConditions(notifsListQuery.data, props.currentUser.notifications)\n  // useEffect(() => {\n  //     if (notifsList) {\n  //         props.setCurrentUserNotifications(notifsList)\n  //     }\n  // }, [notifsList, props, props.setCurrentUserNotifications])\n  // console.log(props.currentUser.notifications)\n  // if (props.currentUser.notifications.length > 0) {\n  //     if (!props.currentUser.notifications[0].userTo) {\n  //         return (\n  //             <div style={{gridColumn: '1/3'}}>\n  //                 <div style={{height: '5vh'}}/>\n  //                 <Loading color=\"white\" />\n  //             </div>\n  //         )\n  //     }\n  // }\n  // const Filter = () => {\n  //     const sentOptions = () => {\n  //         const allOptions = ['from you', 'to you']\n  //         const onOptionClick = (option) => {\n  //             setSentFilter(option)\n  //             setShowSFDD(!showSFDD)\n  //         }\n  //         return allOptions.map(o => o !== sentFilter ? <div onClick={() => onOptionClick(o)} className=\"NF-DD-option\" key={`SFDD${o}`}>{o}</div> : null)\n  //     }\n  //     const sentDD = showSFDD ? (\n  //             <div className=\"NF-dropdown\">\n  //                 <div className=\"NF-splitter\" />\n  //                 {sentOptions()}\n  //             </div>\n  //         ): null\n  //     const statusOptions = () => {\n  //         const allOptions = ['all', 'accepted', 'declined', 'pending', 'messages']\n  //         const onOptionClick = (option) => {\n  //             setStatusFilter(option)\n  //             setShowStatusDD(!showStatusDD)\n  //         }\n  //         return allOptions.map(o => o !== statusFilter ? <div onClick={() => onOptionClick(o)} className={`${o}-option NF-DD-option`} key={`StatusDD${o}`}>{o}</div> : null)\n  //     }\n  //     const statusDD = showStatusDD ? (\n  //             <div className=\"NF-dropdown\">\n  //                 <div className=\"NF-splitter\" />\n  //                 {statusOptions()}\n  //             </div>\n  //         ): null\n  //     return (\n  //         <div className=\"notif-filter-container\">\n  //             <div className=\"NF-creator-container\">\n  //                 <h4 className=\"NF-label\">status</h4>\n  //                 <div className=\"NF-option-container\">\n  //                     <div onClick={() => setShowStatusDD(!showStatusDD)} className={`${statusFilter}-option NF-option`}>{statusFilter}</div>\n  //                     {statusDD}\n  //                 </div>\n  //             </div>\n  //             <div className=\"NF-creator-container\" style={{marginLeft: '15px'}}>\n  //                 <h4 className=\"NF-label\">sent</h4>\n  //                 <div className=\"NF-option-container\">\n  //                     <div onClick={() => setShowSFDD(!showSFDD)} className=\"NF-option\">{sentFilter}</div>\n  //                     {sentDD}\n  //                 </div>\n  //             </div>\n  //         </div>\n  //     )\n  // }\n  // const statusConditions = (notif) => {\n  //     if (statusFilter === 'all') return true\n  //     const notifStatus = notif.accepted === null ?\n  //         'pending' : \n  //         notif.accepted ?\n  //         notif.post ?\n  //             'accepted' : 'messages'\n  //         : 'declined'\n  //     if (statusFilter === notifStatus) return true\n  //     return false\n  // }\n  // const sentConditions = (notif) => {\n  //     if (sentFilter === 'all') return true\n  //     const sentStatus = notif.userFrom.username === props.currentUser.username ?\n  //         'from you' : 'to you'\n  //     if (sentFilter === sentStatus) return true\n  //     return false\n  // }\n  // const showNotifications = props.currentUser.notifications.map(n => {\n  //     if (statusConditions(n) && sentConditions(n)){\n  //         return <Notif notif={n} key={`UN${n._id}`}/>\n  //     }\n  //     return null\n  // }).reverse()\n  // return (\n  //     <div className=\"userUtil-notif\">\n  //         <Filter />\n  //         <div style={{height: '10px'}} />\n  //         {showNotifications}\n  //         <div style={{height: '10px'}} />\n  //     </div>\n  // )\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserNotifList);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/components/user/utilities/UserNotifList.js"],"names":["React","useState","useEffect","connect","useQuery","LIST_OF_NOTIFICATIONS","setCurrentUserNotifications","Notif","Loading","apollo","apolloClient","bindActionCreators","UserNotifList","props","notifsListQuery","variables","notifications","currentUser","map","n","_id","gimmeQuery","data","listOfNotifications","userFrom","username","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,SAASC,2BAAT,QAA2C,qCAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,IAAgBC,YAAhB,QAAmC,qBAAnC;AACA,SAAQC,kBAAR,QAAiC,OAAjC;;AAIA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,QAAMC,eAAe,GAAGV,QAAQ,CAACC,qBAAD,EAAwB;AACpDU,IAAAA,SAAS,EAAE;AAACC,MAAAA,aAAa,EAAEH,KAAK,CAACI,WAAN,CAAkBD,aAAlB,CAAgCE,GAAhC,CAAoCC,CAAC,IAAIA,CAAC,CAACC,GAA3C;AAAhB;AADyC,GAAxB,CAAhC,CAD6B,CAI7B;AACA;AACA;AACA;;AAEA,MAAIC,UAAU,EAAd,EAAkB;AACd,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKP,eAAe,CAACQ,IAAhB,CAAqBC,mBAArB,CAAyCL,GAAzC,CAA6CC,CAAC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,CAAC,CAACK,QAAF,CAAWC,QAAhB,CAAlD,CADL,CADA;AAKH;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP,CAhB6B,CAkvID;;AAyIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAV,IAAAA,WAAW,EAAEU,KAAK,CAACV;AADnB,GAAP;AAGA,CAJD;;AAMA,MAAMW,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHvB,IAAAA,2BAA2B,EAAEK,kBAAkB,CAACL,2BAAD,EAA8BuB,QAA9B;AAD5C,GAAP;AAGH,CAJD;;AAMA,eAAe1B,OAAO,CAClBuB,eADkB,EAElBE,kBAFkB,CAAP,CAGbhB,aAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { LIST_OF_NOTIFICATIONS } from '../../../src/schemas/queries'\r\nimport { setCurrentUserNotifications } from'../../../redux/reducers/currentUser'\r\nimport Notif from './Notif'\r\nimport Loading from '../../Loading'\r\nimport apollo, {apolloClient} from '../../../lib/apollo'\r\nimport {bindActionCreators} from 'redux'\r\n\r\n\r\n\r\nconst UserNotifList = (props) => {\r\n    const notifsListQuery = useQuery(LIST_OF_NOTIFICATIONS, {\r\n        variables: {notifications: props.currentUser.notifications.map(n => n._id)}\r\n    })\r\n    // const notifsListQuery = apolloClient.query({\r\n    //     query: LIST_OF_NOTIFICATIONS,\r\n    //     variables: {notifications: props.currentUser.notifications.map(n => n._id)}\r\n    // }).catch(err => console.log(err))\r\n\r\n    if (gimmeQuery()) {\r\n        return (\r\n        <p>\r\n            {notifsListQuery.data.listOfNotifications.map(n => <h1>{n.userFrom.username}</h1>)}\r\n        </p>\r\n        )\r\n    }\r\n    return <h1>loading</h1>\r\n\r\n    // const [sentFilter, setSentFilter] = useState('to you')\r\n    // const [showSFDD, setShowSFDD] = useState(false)\r\n    // const [statusFilter, setStatusFilter] = useState('pending')\r\n    // const [showStatusDD, setShowStatusDD] = useState(false)\r\n\r\n    // const notifsListConditions = (query, reducer) => {\r\n    //     // if (!query) { return null }\r\n    //     // if (!query.listOfNotifications) { return null }\r\n    //     // if (reducer.length === 0) { return null }\r\n    //     // if (reducer[0].userTo) {\r\n    //     //     if (query.listOfNotifications[0]._id === reducer[0]._id ) { return null }\r\n    //     // }\r\n    //     return query\r\n    // }\r\n    \r\n\r\n    // const notifsList = notifsListConditions(notifsListQuery.data, props.currentUser.notifications)\r\n\r\n    // useEffect(() => {\r\n    //     if (notifsList) {\r\n    //         props.setCurrentUserNotifications(notifsList)\r\n    //     }\r\n    // }, [notifsList, props, props.setCurrentUserNotifications])\r\n    // console.log(props.currentUser.notifications)\r\n    // if (props.currentUser.notifications.length > 0) {\r\n    //     if (!props.currentUser.notifications[0].userTo) {\r\n    //         return (\r\n    //             <div style={{gridColumn: '1/3'}}>\r\n    //                 <div style={{height: '5vh'}}/>\r\n    //                 <Loading color=\"white\" />\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    // }\r\n\r\n    // const Filter = () => {\r\n    //     const sentOptions = () => {\r\n    //         const allOptions = ['from you', 'to you']\r\n    //         const onOptionClick = (option) => {\r\n    //             setSentFilter(option)\r\n    //             setShowSFDD(!showSFDD)\r\n    //         }\r\n    //         return allOptions.map(o => o !== sentFilter ? <div onClick={() => onOptionClick(o)} className=\"NF-DD-option\" key={`SFDD${o}`}>{o}</div> : null)\r\n    //     }\r\n    //     const sentDD = showSFDD ? (\r\n    //             <div className=\"NF-dropdown\">\r\n    //                 <div className=\"NF-splitter\" />\r\n    //                 {sentOptions()}\r\n    //             </div>\r\n    //         ): null\r\n\r\n    //     const statusOptions = () => {\r\n    //         const allOptions = ['all', 'accepted', 'declined', 'pending', 'messages']\r\n    //         const onOptionClick = (option) => {\r\n    //             setStatusFilter(option)\r\n    //             setShowStatusDD(!showStatusDD)\r\n    //         }\r\n    //         return allOptions.map(o => o !== statusFilter ? <div onClick={() => onOptionClick(o)} className={`${o}-option NF-DD-option`} key={`StatusDD${o}`}>{o}</div> : null)\r\n    //     }\r\n    //     const statusDD = showStatusDD ? (\r\n    //             <div className=\"NF-dropdown\">\r\n    //                 <div className=\"NF-splitter\" />\r\n    //                 {statusOptions()}\r\n    //             </div>\r\n    //         ): null\r\n    //     return (\r\n    //         <div className=\"notif-filter-container\">\r\n    //             <div className=\"NF-creator-container\">\r\n    //                 <h4 className=\"NF-label\">status</h4>\r\n    //                 <div className=\"NF-option-container\">\r\n    //                     <div onClick={() => setShowStatusDD(!showStatusDD)} className={`${statusFilter}-option NF-option`}>{statusFilter}</div>\r\n    //                     {statusDD}\r\n    //                 </div>\r\n    //             </div>\r\n    //             <div className=\"NF-creator-container\" style={{marginLeft: '15px'}}>\r\n    //                 <h4 className=\"NF-label\">sent</h4>\r\n    //                 <div className=\"NF-option-container\">\r\n    //                     <div onClick={() => setShowSFDD(!showSFDD)} className=\"NF-option\">{sentFilter}</div>\r\n    //                     {sentDD}\r\n    //                 </div>\r\n    //             </div>\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const statusConditions = (notif) => {\r\n    //     if (statusFilter === 'all') return true\r\n    //     const notifStatus = notif.accepted === null ?\r\n    //         'pending' : \r\n    //         notif.accepted ?\r\n    //         notif.post ?\r\n    //             'accepted' : 'messages'\r\n    //         : 'declined'\r\n    //     if (statusFilter === notifStatus) return true\r\n    //     return false\r\n    // }\r\n    // const sentConditions = (notif) => {\r\n    //     if (sentFilter === 'all') return true\r\n    //     const sentStatus = notif.userFrom.username === props.currentUser.username ?\r\n    //         'from you' : 'to you'\r\n    //     if (sentFilter === sentStatus) return true\r\n    //     return false\r\n    // }\r\n    // const showNotifications = props.currentUser.notifications.map(n => {\r\n    //     if (statusConditions(n) && sentConditions(n)){\r\n    //         return <Notif notif={n} key={`UN${n._id}`}/>\r\n    //     }\r\n    //     return null\r\n    // }).reverse()\r\n    // return (\r\n    //     <div className=\"userUtil-notif\">\r\n    //         <Filter />\r\n    //         <div style={{height: '10px'}} />\r\n    //         {showNotifications}\r\n    //         <div style={{height: '10px'}} />\r\n    //     </div>\r\n    // )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        currentUser: state.currentUser\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch),\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UserNotifList)"]},"metadata":{},"sourceType":"module"}