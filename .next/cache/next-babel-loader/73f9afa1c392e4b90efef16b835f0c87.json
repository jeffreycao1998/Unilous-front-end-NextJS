{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\results.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport resStyle from '../styles/css/pages/results.css';\nimport Post from '../src/components/post/Post';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SEARCH_POSTS } from '../src/schemas/queries';\nimport { addPosts } from '../src/reducers/posts';\nimport { Link } from 'react-router-dom';\nimport Loading from '../src/components/Loading';\nimport { palletteGenerator } from '../src/functions/functions';\nimport { toggleStretchLayout } from '../src/reducers/stretchLayout';\nimport { setEventSearch } from '../src/reducers/eventSearch'; // import covidIconB from '../src/static/svg/events/virusB.svg'\n// import covidIconW from '../src/static/svg/events/virusW.svg'\n// import covidIconC from '../src/static/svg/events/virusC.svg'\n// import usaIconB from '../src/static/svg/events/usaB.svg'\n// import usaIconW from '../src/static/svg/events/usaW.svg'\n// import usaIconC from '../src/static/svg/events/usaC.svg'\n\nconst Results = props => {\n  // const currentIds = props.posts ? props.posts.map(p => p._id) : []\n  // const [scrollAtBottom, setScrollAtBottom] = useState(false)\n  // const decodedSearch = decodeURIComponent(props.query)\n  // const SPQuery = useQuery(SEARCH_POSTS, {\n  //     variables: {\n  //         filterString: decodedSearch,\n  //         postIds: currentIds,\n  //         eventQuery: props.eventSearch,\n  //     }\n  // })\n  // const moreResults = () => {\n  //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\n  //         return false\n  //     }\n  //     return true\n  // }\n  // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //     setScrollAtBottom(true)\n  // }\n  // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //     setScrollAtBottom(false)\n  // }\n  // const triggerWhenScroll = () => {\n  //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\n  //         setScrollAtBottom(true)\n  //     }\n  //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\n  //         setScrollAtBottom(false)\n  //     }\n  // }\n  // window.addEventListener('scroll', triggerWhenScroll, false)\n  // const postChangeConditions = (query, reducer) => {\n  //     if (!scrollAtBottom) return false\n  //     if (!query) return false\n  //     if (!query.searchPosts) return false\n  //     if (!reducer) {\n  //         return true\n  //     }\n  //     const queryTitles = query.searchPosts.map(i => i.title)\n  //     const reducerTitles = reducer.map(i => i.title)\n  //     for (const title of queryTitles) {\n  //         if (!reducerTitles.includes(title)) {\n  //             return true\n  //         }\n  //     }\n  //     return false\n  // }\n  // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\n  //     SPQuery.data.searchPosts : null\n  // useEffect(() => {\n  //     if (postsSearched && !props.posts) {\n  //         props.addPosts(SPQuery.data.searchPosts)\n  //         setScrollAtBottom(false)\n  //     }\n  //     if (postsSearched && props.posts) {\n  //         if (postsSearched.length > 0) {\n  //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\n  //                 props.addPosts(SPQuery.data.searchPosts)\n  //                 setScrollAtBottom(false)\n  //             }\n  //         }\n  //     }\n  // }, [SPQuery, props.addPosts, props, postsSearched])\n  // if (!props.posts) {\n  //     return (\n  //         <div>\n  //             <div style={{height: '5vh'}}/>\n  //             <Loading />\n  //         </div>\n  //     )\n  // }\n  // const eventQuery = props.eventSearch\n  // const eventKeys = () => {\n  //     if (eventQuery === 'COVID-19') {\n  //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\n  //     }\n  //     if (eventQuery === '2020 Election') {\n  //         return ['election', 'democrat', 'republican', 'vote']\n  //     }\n  //     return null\n  // }\n  // const postToShow = (post, eventKeys) => {\n  //     if (eventKeys) {\n  //         for (const keyWord of eventKeys) {\n  //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\n  //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //             }\n  //         }\n  //         return false\n  //     }\n  //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\n  //     for (const skill of post.skillNames) {\n  //         if (decodedSearch.includes(skill)) return true\n  //     }\n  //     return false\n  // }\n  // let postsToShow = props.posts\n  // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\n  // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\n  // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\n  // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\n  // const eventsList = [\n  //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: covidIconW, iconC: covidIconC},\n  //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: usaIconW, iconC: usaIconC}\n  // ]\n  // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \n  //     <div className=\"event-selected\" onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconW} className=\"event-image\" alt={e.name} />\n  //         <h3 className=\"event-text\">{e.name}</h3>\n  //     </div>\n  //     :\n  //     <div className=\"event\" onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\n  //         <img src={e.iconC} className=\"event-image\" alt={e.name} />\n  //         <h3 className=\"event-text\">{e.name}</h3>\n  //     </div>\n  // )\n  // const eventsContainerClass = props.eventSearch ? 'EC-active' : null\n  // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\n  return __jsx(\"div\", {\n    className: \"home-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"Results\"));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         posts: state.posts,\n//         search: state.search,\n//         stretchLayout: state.stretchLayout,\n//         eventSearch: state.eventSearch,\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { addPosts, toggleStretchLayout, setEventSearch }\n// )(Results)\n\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/results.js"],"names":["React","useState","useEffect","connect","resStyle","Post","useQuery","SEARCH_POSTS","addPosts","Link","Loading","palletteGenerator","toggleStretchLayout","setEventSearch","Results","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,SAASC,cAAT,QAA+B,6BAA/B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvcAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CADJ;AAgCH,CA5JD,C,CA8JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzKMD,O;AA0KN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport resStyle from '../styles/css/pages/results.css'\r\nimport Post from '../src/components/post/Post'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { SEARCH_POSTS } from '../src/schemas/queries'\r\nimport { addPosts } from '../src/reducers/posts'\r\nimport { Link } from 'react-router-dom'\r\nimport Loading from '../src/components/Loading'\r\nimport { palletteGenerator } from '../src/functions/functions'\r\nimport { toggleStretchLayout } from '../src/reducers/stretchLayout'\r\nimport { setEventSearch } from '../src/reducers/eventSearch'\r\n// import covidIconB from '../src/static/svg/events/virusB.svg'\r\n// import covidIconW from '../src/static/svg/events/virusW.svg'\r\n// import covidIconC from '../src/static/svg/events/virusC.svg'\r\n// import usaIconB from '../src/static/svg/events/usaB.svg'\r\n// import usaIconW from '../src/static/svg/events/usaW.svg'\r\n// import usaIconC from '../src/static/svg/events/usaC.svg'\r\n\r\nconst Results = (props) => {\r\n    // const currentIds = props.posts ? props.posts.map(p => p._id) : []\r\n    // const [scrollAtBottom, setScrollAtBottom] = useState(false)\r\n    // const decodedSearch = decodeURIComponent(props.query)\r\n    // const SPQuery = useQuery(SEARCH_POSTS, {\r\n    //     variables: {\r\n    //         filterString: decodedSearch,\r\n    //         postIds: currentIds,\r\n    //         eventQuery: props.eventSearch,\r\n    //     }\r\n    // })\r\n    // const moreResults = () => {\r\n    //     if (SPQuery.data && SPQuery.data.searchPosts === null) {\r\n    //         return false\r\n    //     }\r\n    //     return true\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //     setScrollAtBottom(true)\r\n    // }\r\n    // if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //     setScrollAtBottom(false)\r\n    // }\r\n    // const triggerWhenScroll = () => {\r\n    //     if ((window.innerHeight + window.scrollY) > (document.body.offsetHeight - 100) && !scrollAtBottom) {\r\n    //         setScrollAtBottom(true)\r\n    //     }\r\n    //     if ((window.innerHeight + window.scrollY) <= (document.body.offsetHeight - 100) && scrollAtBottom) {\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    // }\r\n    // window.addEventListener('scroll', triggerWhenScroll, false)\r\n\r\n    // const postChangeConditions = (query, reducer) => {\r\n    //     if (!scrollAtBottom) return false\r\n    //     if (!query) return false\r\n    //     if (!query.searchPosts) return false\r\n    //     if (!reducer) {\r\n    //         return true\r\n    //     }\r\n    //     const queryTitles = query.searchPosts.map(i => i.title)\r\n    //     const reducerTitles = reducer.map(i => i.title)\r\n    //     for (const title of queryTitles) {\r\n    //         if (!reducerTitles.includes(title)) {\r\n    //             return true\r\n    //         }\r\n    //     }\r\n    //     return false\r\n    // }\r\n    // const postsSearched = postChangeConditions(SPQuery.data, props.posts) ?\r\n    //     SPQuery.data.searchPosts : null\r\n    // useEffect(() => {\r\n    //     if (postsSearched && !props.posts) {\r\n    //         props.addPosts(SPQuery.data.searchPosts)\r\n    //         setScrollAtBottom(false)\r\n    //     }\r\n    //     if (postsSearched && props.posts) {\r\n    //         if (postsSearched.length > 0) {\r\n    //             if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)){\r\n    //                 props.addPosts(SPQuery.data.searchPosts)\r\n    //                 setScrollAtBottom(false)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [SPQuery, props.addPosts, props, postsSearched])\r\n    // if (!props.posts) {\r\n    //     return (\r\n    //         <div>\r\n    //             <div style={{height: '5vh'}}/>\r\n    //             <Loading />\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n    // const eventQuery = props.eventSearch\r\n    // const eventKeys = () => {\r\n    //     if (eventQuery === 'COVID-19') {\r\n    //         return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response']\r\n    //     }\r\n    //     if (eventQuery === '2020 Election') {\r\n    //         return ['election', 'democrat', 'republican', 'vote']\r\n    //     }\r\n    //     return null\r\n    // }\r\n    // const postToShow = (post, eventKeys) => {\r\n    //     if (eventKeys) {\r\n    //         for (const keyWord of eventKeys) {\r\n    //             if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\r\n    //                 if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //             }\r\n    //         }\r\n    //         return false\r\n    //     }\r\n    //     if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true\r\n    //     for (const skill of post.skillNames) {\r\n    //         if (decodedSearch.includes(skill)) return true\r\n    //     }\r\n\r\n    //     return false\r\n    // }\r\n    // let postsToShow = props.posts\r\n    // postsToShow = postsToShow.map(p => postToShow(p, eventKeys()) ? <Post stretch={props.stretchLayout} key={`post${p._id}`} post={p} /> : null)\r\n    // const pallette = palletteGenerator('rgb(40,40,40)').colorPallette\r\n    // const layoutBtnClass = props.stretchLayout ? 'layout-button-grid' : 'layout-button-stretch'\r\n    // const layoutClass = !props.stretchLayout ? 'results-content-grid' : 'results-content-stretch'\r\n    \r\n    // const eventsList = [\r\n    //     {name: 'COVID-19', color: 'rgb(237,32,40)', iconB: covidIconB, iconW: covidIconW, iconC: covidIconC},\r\n    //     {name: '2020 Election', color: 'rgb(255,0,255)', iconB: usaIconB, iconW: usaIconW, iconC: usaIconC}\r\n    // ]\r\n    // const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? \r\n    //     <div className=\"event-selected\" onClick={() => props.setEventSearch(null)} style={{borderColor: e.color, backgroundColor: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconW} className=\"event-image\" alt={e.name} />\r\n    //         <h3 className=\"event-text\">{e.name}</h3>\r\n    //     </div>\r\n    //     :\r\n    //     <div className=\"event\" onClick={() => props.setEventSearch(e.name)} style={{borderColor: e.color, color: e.color}} key={`EV${e.name}`}>\r\n    //         <img src={e.iconC} className=\"event-image\" alt={e.name} />\r\n    //         <h3 className=\"event-text\">{e.name}</h3>\r\n    //     </div>\r\n    // )\r\n    \r\n    // const eventsContainerClass = props.eventSearch ? 'EC-active' : null\r\n    // const showLoading = moreResults() ? <Loading /> : <h3 style={{opacity: '0.8'}}>no more posts</h3>\r\n    return (\r\n        <div className=\"home-wrapper\">\r\n            <h1>Results</h1>\r\n            {/* <div className=\"results-container\">\r\n                <Link to=\"/post-form/\" className=\"form-container-expand standard-hover neutralize-link\" title={props.setTitle}>\r\n                    <img className=\"form-expand-icon\" src={pallette.plusIcon} alt=\"team up\" />\r\n                </Link>\r\n                <div className=\"navbar-height\"/>\r\n                <h2 className=\"secondary-title\">events</h2>\r\n                <div className={`events-container ${eventsContainerClass}`}>\r\n                    {eventsHTML}\r\n                </div>\r\n                <div onClick={() => props.toggleStretchLayout(!props.stretchLayout)} className=\"layout-wrapper\">\r\n                    <div className=\"layout-container\">\r\n                        <div className={`layout-button ${layoutBtnClass}`} >\r\n                            <div className=\"layout-box\"/>\r\n                            <div className=\"layout-box\"/>\r\n                            <div className=\"layout-box\"/>\r\n                            <div className=\"layout-box\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div />\r\n                <div className={`results-content ${layoutClass}`}>\r\n                    {postsToShow}\r\n                </div>\r\n                <div style={{position: 'relative', height: '400px'}}>\r\n                    {showLoading}\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         posts: state.posts,\r\n//         search: state.search,\r\n//         stretchLayout: state.stretchLayout,\r\n//         eventSearch: state.eventSearch,\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { addPosts, toggleStretchLayout, setEventSearch }\r\n// )(Results)\r\nexport default Results"]},"metadata":{},"sourceType":"module"}