{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\userPage.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react'; // import { connect } from 'react-redux'\n// import { useQuery, useMutation } from '@apollo/react-hooks'\n// import { MAKE_NOTIFICATION } from '../../schemas/mutations'\n// import { FIND_USER } from '../../schemas/queries'\n// import { setAlert, resetAlert } from '../../reducers/alertNotif'\n\nimport UP from '../styles/pages/userPage.module.css'; // import PostSmallList from '../post/PostSmallList'\n// import Loading from '../Loading'\n// import FormContainer from '../text-field/FormContainer'\n// import userIcon from '../../static/svg/userB.svg'\n// import ReferenceLink from '../text-field/ReferenceLink'\n// import { palletteGenerator, useField, triggerAlert } from '../../functions/functions'\n\nconst UserPage = props => {\n  let running;\n\n  if (true) {\n    running = 'client';\n  } else {\n    running = 'server'; // running = localStorage.getItem('running')\n  }\n\n  const Posts = () => {\n    return __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, props.posts.map(p => __jsx(\"li\", {\n      key: p.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 19\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 23\n      }\n    }, p.title))));\n  }; //   const [currentUser, setCurrentUser] = useState(null)\n  //   const message = useField('text')\n  //   const decodedUser = decodeURIComponent(props.userUsername)\n  //   const userQuery = useQuery(FIND_USER, {\n  //     variables: {username: decodedUser}\n  //   })\n  //   const onError = (e) => {\n  //     const eMessage = e.message\n  //     if (eMessage.includes('Path `message` (')) {\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n  //     }\n  //   }\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n  //     onError\n  //   })\n  //   const handleMessage = async () => {\n  //     if (!message.fields.value.length) {\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //       return null\n  //     }\n  //     const result = await sendMessage({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentUser._id,\n  //             message: message.fields.value,\n  //         }\n  //     })\n  //     if (result) {\n  //         message.reset()\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  //   const userConditions = () => {\n  //     const query = userQuery.data\n  //     const reducer = currentUser\n  //     if (!query) return null\n  //     if (!query.findUser) return null\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\n  //     return null\n  //   }\n  //   const user = userConditions()\n  //   useEffect(() => {\n  //     if (user) {\n  //       setCurrentUser(user)\n  //     }\n  //   }, [user, setCurrentUser])\n  //   if (!currentUser) {\n  //     return (\n  //       <div>\n  //           <div style={{height: '15vh'}}/>\n  //           <Loading />\n  //       </div>\n  //     )\n  //   }\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n\n\n  return __jsx(\"div\", {\n    className: 'UP.UP-container',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: UP.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"UserPage.js\"), __jsx(\"img\", {\n    src: \"/svg/bellB.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//     currentUser: state.currentUser        \n// \t}\n// }\n// export default connect(\n//   mapStateToProps,\n//   {setAlert, resetAlert}\n// )(UserPage)\n\n\n_c = UserPage;\nexport default UserPage; // uses formContainer.css\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPage\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/userPage.js"],"names":["React","useState","useEffect","UP","UserPage","props","running","Posts","posts","map","p","title","test"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,EAAP,MAAe,qCAAf,C,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,MAAIC,OAAJ;;AACA,YAAmC;AAC/BA,IAAAA,OAAO,GAAG,QAAV;AACH,GAFD,MAEO;AACHA,IAAAA,OAAO,GAAG,QAAV,CADG,CAEH;AACH;;AACD,QAAMC,KAAK,GAAG,MAAM;AAChB,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,KAAK,CAACG,KAAN,CAAYC,GAAZ,CAAgBC,CAAC,IACd;AAAI,MAAA,GAAG,EAAEA,CAAC,CAACC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,CAAC,CAACC,KAAP,CADJ,CADH,CADL,CADJ;AASH,GAVD,CAR0B,CAmB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAEI;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAER,EAAE,CAACS,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAK,IAAA,GAAG,EAAC,gBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ;AA+BH,CA3GD,C,CA6GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KArHMR,Q;AAuHN,eAAeA,QAAf,C,CAEA","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n// import { connect } from 'react-redux'\r\n// import { useQuery, useMutation } from '@apollo/react-hooks'\r\n// import { MAKE_NOTIFICATION } from '../../schemas/mutations'\r\n// import { FIND_USER } from '../../schemas/queries'\r\n// import { setAlert, resetAlert } from '../../reducers/alertNotif'\r\nimport UP from '../styles/pages/userPage.module.css';\r\n// import PostSmallList from '../post/PostSmallList'\r\n// import Loading from '../Loading'\r\n// import FormContainer from '../text-field/FormContainer'\r\n// import userIcon from '../../static/svg/userB.svg'\r\n// import ReferenceLink from '../text-field/ReferenceLink'\r\n// import { palletteGenerator, useField, triggerAlert } from '../../functions/functions'\r\n\r\nconst UserPage = (props) => {\r\n  let running\r\n  if (typeof window !== 'undefined') {\r\n      running = 'client'\r\n  } else {\r\n      running = 'server'\r\n      // running = localStorage.getItem('running')\r\n  }\r\n  const Posts = () => {\r\n      return (\r\n          <ul>\r\n              {props.posts.map(p => (\r\n                  <li key={p.title}>\r\n                      <h3>{p.title}</h3>\r\n                  </li>\r\n              ))}\r\n          </ul>\r\n      )\r\n  }\r\n  //   const [currentUser, setCurrentUser] = useState(null)\r\n  //   const message = useField('text')\r\n  //   const decodedUser = decodeURIComponent(props.userUsername)\r\n  //   const userQuery = useQuery(FIND_USER, {\r\n  //     variables: {username: decodedUser}\r\n  //   })\r\n  //   const onError = (e) => {\r\n  //     const eMessage = e.message\r\n  //     if (eMessage.includes('Path `message` (')) {\r\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\r\n  //     }\r\n  //   }\r\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\r\n  //     onError\r\n  //   })\r\n  //   const handleMessage = async () => {\r\n  //     if (!message.fields.value.length) {\r\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\r\n  //       return null\r\n  //     }\r\n  //     const result = await sendMessage({\r\n  //         variables: {\r\n  //             userFromId: props.currentUser._id,\r\n  //             userToId: currentUser._id,\r\n  //             message: message.fields.value,\r\n  //         }\r\n  //     })\r\n  //     if (result) {\r\n  //         message.reset()\r\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\r\n  //     }\r\n  // }\r\n\r\n  //   const userConditions = () => {\r\n  //     const query = userQuery.data\r\n  //     const reducer = currentUser\r\n  //     if (!query) return null\r\n  //     if (!query.findUser) return null\r\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\r\n  //     return null\r\n  //   }\r\n\r\n  //   const user = userConditions()\r\n  //   useEffect(() => {\r\n  //     if (user) {\r\n  //       setCurrentUser(user)\r\n  //     }\r\n  //   }, [user, setCurrentUser])\r\n  //   if (!currentUser) {\r\n  //     return (\r\n  //       <div>\r\n  //           <div style={{height: '15vh'}}/>\r\n  //           <Loading />\r\n  //       </div>\r\n  //     )\r\n  //   }\r\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\r\n    return (\r\n\r\n        <div className={'UP.UP-container'}>\r\n          <h1 className={UP.test}>UserPage.js</h1>\r\n          <img src=\"/svg/bellB.svg\" />\r\n          {/* <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\r\n          <div className={UP.UP-content}>\r\n            <div className={UP.UP-title-container}>\r\n              <img className={UP.UP-title-icon} src='/svg/userB.svg' alt=\"user\" />\r\n              <h2 className={UP.UP-title}>{currentUser.username}</h2>\r\n            </div>\r\n            <h3 className={UP.UP-title} style={{opacity: '0.8'}}>profile link</h3>\r\n            <ReferenceLink rl={currentUser.referenceLink} />\r\n            <h2 className={UP.UP-title}>posts</h2>\r\n            <div className={UP.UP-posts-container}>\r\n              <PostSmallList posts={currentUser.posts} />\r\n            </div>\r\n          </div>\r\n            <FormContainer pallette={pallette} >\r\n                  <h3 className=\"form-title\">contact {currentUser.username}</h3>\r\n                  <h4 className=\"form-title-secondary\">message</h4>\r\n                  <div className=\"form-field-container\">\r\n                    <textarea className=\"form-field\" {...message.fields} />\r\n                  </div >\r\n                  <div className=\"form-submit-button-container\">\r\n                    \r\n                  <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\r\n                  </div>\r\n            </FormContainer> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//     currentUser: state.currentUser        \r\n// \t}\r\n// }\r\n// export default connect(\r\n//   mapStateToProps,\r\n//   {setAlert, resetAlert}\r\n// )(UserPage)\r\n\r\nexport default UserPage; \r\n\r\n// uses formContainer.css"]},"metadata":{},"sourceType":"module"}