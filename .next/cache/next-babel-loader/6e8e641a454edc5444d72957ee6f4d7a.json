{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\components\\\\Layout.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { setCurrentUser, setPendingNotifications } from '../redux/reducers/currentUser';\nimport { setToken } from '../redux/reducers/token';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport NavBar from './navBar/NavBar';\nimport { FIND_USER, PENDING_NOTIFS } from '../src/schemas/queries';\n\nconst Layout = props => {\n  _s();\n\n  if (false) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 47\n    }\n  }, \"Rendering\");else {\n    const {\n      0: query,\n      1: setQuery\n    } = useState('');\n\n    const onQueryChange = event => {\n      setQuery(event.target.value);\n    };\n\n    if (localStorage.getItem('token') && props.token === null) {\n      props.setToken(localStorage.getItem('token'));\n    }\n\n    const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake';\n    const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\n      variables: {\n        userId: currentUserId\n      }\n    });\n    const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake';\n    const userQuery = useQuery(FIND_USER, {\n      variables: {\n        username: currentUserUN\n      }\n    });\n\n    const pendingNotifsConditions = () => {\n      if (!pendingNotifsQuery.data) return null;\n      if (props.currentUser && props.currentUser.pendingNotifications) return null;\n      return pendingNotifsQuery.data.searchAwaitingNotifs;\n    };\n\n    const userConditions = (query, reducer) => {\n      if (!query.data) return null;\n      if (!query.data.findUser) return null;\n      if (reducer) return null;\n      return query.data.findUser;\n    };\n\n    const pendingNotifs = pendingNotifsConditions();\n    const user = userConditions(userQuery, props.currentUser);\n    useEffect(() => {\n      if (user) {\n        props.setCurrentUser(user);\n      }\n\n      if (pendingNotifs) {\n        props.setPendingNotifications(pendingNotifs);\n      }\n    }, [user, props.currentUser, props, pendingNotifs, props.setPendingNotifications]);\n    return __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, __jsx(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, __jsx(NavBar, {\n      query: query,\n      onQueryChange: onQueryChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => __jsx(PostPage, {\n        home: true,\n        postTitle: \"Unilous\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 49\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      exact: true,\n      path: \"/contact/\",\n      render: () => __jsx(Contact, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 57\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      exact: true,\n      path: \"/browse/\",\n      render: () => __jsx(Results, {\n        query: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 56\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      path: \"/browse/:query\",\n      render: ({\n        match\n      }) => __jsx(Results, {\n        query: match.params.query,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 63\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      exact: true,\n      path: \"/post-form/\",\n      render: () => __jsx(PostFormPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 59\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      path: \"/post/:title\",\n      render: ({\n        match\n      }) => __jsx(PostPage, {\n        postTitle: match.params.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 61\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }), __jsx(Route, {\n      path: \"/user/:username\",\n      render: ({\n        match\n      }) => __jsx(UserPage, {\n        userUsername: match.params.username,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 64\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    })));\n  }\n};\n\n_s(Layout, \"IC3Vxh3+Tz5rDV7MgmUeBksc0SU=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = Layout;\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/components/Layout.js"],"names":["React","useState","useEffect","setCurrentUser","setPendingNotifications","setToken","connect","BrowserRouter","Router","Route","useQuery","NavBar","FIND_USER","PENDING_NOTIFS","Layout","props","query","setQuery","onQueryChange","event","target","value","localStorage","getItem","token","currentUserId","currentUser","_id","pendingNotifsQuery","variables","userId","currentUserUN","userQuery","username","pendingNotifsConditions","data","pendingNotifications","searchAwaitingNotifs","userConditions","reducer","findUser","pendingNotifs","user","match","params","title","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { setCurrentUser, setPendingNotifications } from '../redux/reducers/currentUser'\r\nimport { setToken } from '../redux/reducers/token'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport NavBar from './navBar/NavBar'\r\nimport { FIND_USER, PENDING_NOTIFS } from '../src/schemas/queries'\r\n\r\nconst Layout = (props) => {\r\n    if (typeof window === 'undefined') return <h1>Rendering</h1>\r\n    else {\r\n        const [query, setQuery] = useState('')\r\n\r\n        const onQueryChange = (event) => {\r\n        setQuery(event.target.value)\r\n        }\r\n        if (localStorage.getItem('token') && props.token === null) {\r\n        props.setToken(localStorage.getItem('token'))\r\n        }\r\n        const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake'\r\n        const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\r\n        variables:  {userId: currentUserId}\r\n        })\r\n        const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake'\r\n        const userQuery = useQuery(FIND_USER, {\r\n        variables: {username: currentUserUN}\r\n        })\r\n        const pendingNotifsConditions = () => {\r\n        if (!pendingNotifsQuery.data) return null\r\n        if (props.currentUser && props.currentUser.pendingNotifications) return null\r\n        return pendingNotifsQuery.data.searchAwaitingNotifs\r\n        }\r\n        const userConditions = (query, reducer) => {\r\n        if (!query.data) return null\r\n        if (!query.data.findUser) return null\r\n        if (reducer) return null\r\n        return query.data.findUser\r\n        }\r\n        const pendingNotifs = pendingNotifsConditions()\r\n        const user = userConditions(userQuery, props.currentUser)\r\n        useEffect(() => {\r\n        if (user) {\r\n            props.setCurrentUser(user)\r\n        }\r\n        if (pendingNotifs) {\r\n            props.setPendingNotifications(pendingNotifs)\r\n        }\r\n        }, [user, props.currentUser, props, pendingNotifs, props.setPendingNotifications])\r\n    \r\n        return (\r\n        <div className=\"wrapper\">\r\n            <Router>\r\n            <NavBar query={query} onQueryChange={onQueryChange} />\r\n            <Route exact path=\"/\" render={() => <PostPage home={true} postTitle=\"Unilous\" /> } />\r\n            <Route exact path=\"/contact/\" render={() => <Contact />} />\r\n            <Route exact path=\"/browse/\" render={() => <Results query=\"\" /> } />\r\n            <Route path=\"/browse/:query\" render={({match}) => <Results query={match.params.query} /> } />\r\n            <Route exact path=\"/post-form/\" render={() => <PostFormPage /> } />\r\n            <Route path=\"/post/:title\" render={({match}) => <PostPage postTitle={match.params.title} /> } />\r\n            <Route path=\"/user/:username\" render={({match}) => <UserPage userUsername={match.params.username} /> } />\r\n            </Router>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        token: state.token\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default Layout"]},"metadata":{},"sourceType":"module"}