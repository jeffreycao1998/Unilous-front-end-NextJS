{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\contact.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport contStyle from '../styles/pages/contact.module.css';\nimport { bindActionCreators } from 'redux'; // import logoIcon from '../src/static/svg/logo/logoW.svg'\n\nimport { setToken } from '../redux/reducers/token';\nimport { FIND_USER } from '../src/schemas/queries';\nimport { useQuery } from '@apollo/react-hooks';\nimport { apolloClient } from '../lib/apollo';\n\nconst Contact = props => {\n  let running;\n\n  if (true) {\n    running = 'client';\n  } else {\n    running = 'server'; // running = localStorage.getItem('running')\n  }\n\n  const Posts = () => {\n    return __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, props.posts.map(p => __jsx(\"li\", {\n      key: p.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, __jsx(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }, p.title)))); // const postsQuery = useQuery(ALL_POSTS, {\n    //     onError: (e) => console.log(e)\n    // })\n    // if (postsQuery.data && postsQuery.data.allPosts) {\n    //     return (\n    //         <ul>\n    //             {postsQuery.data.allPosts.map(p => (\n    //                 <li key={p.title}>\n    //                     <h3>{p.title}</h3>\n    //                 </li>\n    //             ))}\n    //         </ul>\n    //     )\n    // }\n    // return <h3>Loading ...</h3>\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: contStyle.test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Contact\"), __jsx(\"button\", {\n    onClick: () => props.setToken('hello'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"set token to \\\"hello\\\"\"), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"token = \", props.token), __jsx(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"running on \", running), __jsx(\"img\", {\n    src: \"/svg/bellB.svg\",\n    alt: \"bell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }));\n};\n\n_c = Contact;\n\nContact.getInitialProps = async context => {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: 'SebastianSosa'\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const postsQuery = await apolloClient.query({\n    query: ALL_POSTS\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  console.log(postsQuery);\n  const json = await postsQuery.data.allPosts;\n  return {\n    posts: postsQuery.data.allPosts,\n    user: userQuery.data.findUser\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setToken: bindActionCreators(setToken, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contact);\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/contact.js"],"names":["React","connect","Link","contStyle","bindActionCreators","setToken","FIND_USER","useQuery","apolloClient","Contact","props","running","Posts","posts","map","p","title","test","token","getInitialProps","context","userQuery","query","variables","username","then","res","catch","err","console","log","postsQuery","ALL_POSTS","json","data","allPosts","user","findUser","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport contStyle from '../styles/pages/contact.module.css'\r\nimport {bindActionCreators} from 'redux'\r\n// import logoIcon from '../src/static/svg/logo/logoW.svg'\r\nimport {setToken} from '../redux/reducers/token'\r\nimport {FIND_USER} from '../src/schemas/queries'\r\nimport {useQuery} from '@apollo/react-hooks'\r\nimport {apolloClient} from '../lib/apollo'\r\n\r\nconst Contact = (props) => {\r\n    let running\r\n    if (typeof window !== 'undefined') {\r\n        running = 'client'\r\n    } else {\r\n        running = 'server'\r\n        // running = localStorage.getItem('running')\r\n    }\r\n    const Posts = () => {\r\n        return (\r\n            <ul>\r\n                {props.posts.map(p => (\r\n                    <li key={p.title}>\r\n                        <h3>{p.title}</h3>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n        // const postsQuery = useQuery(ALL_POSTS, {\r\n        //     onError: (e) => console.log(e)\r\n        // })\r\n        // if (postsQuery.data && postsQuery.data.allPosts) {\r\n        //     return (\r\n        //         <ul>\r\n        //             {postsQuery.data.allPosts.map(p => (\r\n        //                 <li key={p.title}>\r\n        //                     <h3>{p.title}</h3>\r\n        //                 </li>\r\n        //             ))}\r\n        //         </ul>\r\n        //     )\r\n        // }\r\n        // return <h3>Loading ...</h3>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1 className={contStyle.test}>Contact</h1> \r\n            <button onClick={() => props.setToken('hello')}>set token to \"hello\"</button>\r\n            <h2>token = {props.token}</h2>\r\n            <Posts />\r\n            <p>running on {running}</p>\r\n            <img src=\"/svg/bellB.svg\" alt=\"bell\" />\r\n            {/* <div className=\"navbar-height\" />\r\n            <div className={contStyle.contacts-container}>\r\n                <div className={contStyle.contact-container}>\r\n                    <Link to=\"/user/SebastianSosa\" className={`${contStyle.contact-header} neutralize-link`}>\r\n                        <img src={logoIcon} className={contStyle.CH-icon} alt=\"ProjectU\" />\r\n                        <h3 className={contStyle.CH-name}>Sebastian Sosa</h3>\r\n                    </Link>\r\n                    <img src=\"https://i.imgur.com/zgwIwOS.png\" className={contStyle.profile-image} alt=\"profile\" />\r\n                    <div className={contStyle.contact-info-container}>\r\n                        <div className={contStyle.contact-info} style={{backgroundColor: '#f6f6f9'}}><strong>position:</strong> founder, full stack developer</div>\r\n                        <div className={contStyle.contact-info}><strong>email:</strong> 1sebastian1sosa1@gmail.com</div>\r\n                        <div className={contStyle.contact-info}><strong>phone:</strong> +1 786-270-7297</div>\r\n                    </div>\r\n                </div>\r\n                <div className={contStyle.contact-container}>\r\n                    <Link to=\"/user/nesutortik\" className={`${contStyle.contact-header} neutralize-link`}>\r\n                        <img src={logoIcon} className={contStyle.CH-icon} alt=\"ProjectU\" />\r\n                        <h3 className={contStyle.CH-name}>Umyarov Mikhail</h3>\r\n                    </Link>\r\n                    <img src=\"https://i.imgur.com/ew81eQe.png\" className={contStyle.profile-image} alt=\"profile\" />\r\n                    <div className={contStyle.contact-info-container}>\r\n                        <div className={contStyle.contact-info} style={{backgroundColor: '#f6f6f9'}}><strong>position:</strong> UI/UX designer</div>\r\n                        <div className={contStyle.contact-info}><strong>email:</strong> silverusdragonitos@yandex.ru</div>\r\n                        <div className={contStyle.contact-info}><strong>phone:</strong> +7 952-156-96-49</div>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nContact.getInitialProps = async (context) => {\r\n    const userQuery = await apolloClient.query({\r\n        query: FIND_USER,\r\n        variables: {username: 'SebastianSosa'}\r\n    }).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    const postsQuery = await apolloClient.query({query: ALL_POSTS}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    console.log(postsQuery)\r\n    const json = await postsQuery.data.allPosts\r\n    return {\r\n        posts: postsQuery.data.allPosts,\r\n        user: userQuery.data.findUser\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        token: state.token\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setToken: bindActionCreators(setToken, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Contact)"]},"metadata":{},"sourceType":"module"}